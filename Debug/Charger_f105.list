
Charger_f105.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000348c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028f4  08003670  08003670  00013670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000000  08005f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009cc  20000088  08005ffc  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a54  08005ffc  00020a54  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a30b  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000345f  00000000  00000000  0003a3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008e31  00000000  00000000  0003d81b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000af8  00000000  00000000  00046650  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fa8  00000000  00000000  00047148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007ef3  00000000  00000000  000480f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000040bf  00000000  00000000  0004ffe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000540a2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000246c  00000000  00000000  00054120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000088 	.word	0x20000088
 8000200:	00000000 	.word	0x00000000
 8000204:	08003658 	.word	0x08003658

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000008c 	.word	0x2000008c
 8000220:	08003658 	.word	0x08003658

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b97a 	b.w	8000530 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	460e      	mov	r6, r1
 800025c:	4604      	mov	r4, r0
 800025e:	9d08      	ldr	r5, [sp, #32]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d150      	bne.n	8000306 <__udivmoddi4+0xb2>
 8000264:	428a      	cmp	r2, r1
 8000266:	4617      	mov	r7, r2
 8000268:	d96c      	bls.n	8000344 <__udivmoddi4+0xf0>
 800026a:	fab2 fe82 	clz	lr, r2
 800026e:	f1be 0f00 	cmp.w	lr, #0
 8000272:	d00b      	beq.n	800028c <__udivmoddi4+0x38>
 8000274:	f1ce 0c20 	rsb	ip, lr, #32
 8000278:	fa01 f60e 	lsl.w	r6, r1, lr
 800027c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000280:	fa02 f70e 	lsl.w	r7, r2, lr
 8000284:	ea4c 0c06 	orr.w	ip, ip, r6
 8000288:	fa00 f40e 	lsl.w	r4, r0, lr
 800028c:	0c3a      	lsrs	r2, r7, #16
 800028e:	fbbc f9f2 	udiv	r9, ip, r2
 8000292:	b2bb      	uxth	r3, r7
 8000294:	fb02 cc19 	mls	ip, r2, r9, ip
 8000298:	fb09 fa03 	mul.w	sl, r9, r3
 800029c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80002a0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80002a4:	45b2      	cmp	sl, r6
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x6a>
 80002a8:	19f6      	adds	r6, r6, r7
 80002aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80002ae:	f080 8125 	bcs.w	80004fc <__udivmoddi4+0x2a8>
 80002b2:	45b2      	cmp	sl, r6
 80002b4:	f240 8122 	bls.w	80004fc <__udivmoddi4+0x2a8>
 80002b8:	f1a9 0902 	sub.w	r9, r9, #2
 80002bc:	443e      	add	r6, r7
 80002be:	eba6 060a 	sub.w	r6, r6, sl
 80002c2:	fbb6 f0f2 	udiv	r0, r6, r2
 80002c6:	fb02 6610 	mls	r6, r2, r0, r6
 80002ca:	fb00 f303 	mul.w	r3, r0, r3
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80002d4:	42a3      	cmp	r3, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x98>
 80002d8:	19e4      	adds	r4, r4, r7
 80002da:	f100 32ff 	add.w	r2, r0, #4294967295
 80002de:	f080 810b 	bcs.w	80004f8 <__udivmoddi4+0x2a4>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	f240 8108 	bls.w	80004f8 <__udivmoddi4+0x2a4>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	2100      	movs	r1, #0
 80002ee:	1ae4      	subs	r4, r4, r3
 80002f0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d062      	beq.n	80003be <__udivmoddi4+0x16a>
 80002f8:	2300      	movs	r3, #0
 80002fa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fe:	602c      	str	r4, [r5, #0]
 8000300:	606b      	str	r3, [r5, #4]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0xc6>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d055      	beq.n	80003ba <__udivmoddi4+0x166>
 800030e:	2100      	movs	r1, #0
 8000310:	e885 0041 	stmia.w	r5, {r0, r6}
 8000314:	4608      	mov	r0, r1
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	f040 808f 	bne.w	8000442 <__udivmoddi4+0x1ee>
 8000324:	42b3      	cmp	r3, r6
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xda>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80fc 	bhi.w	8000526 <__udivmoddi4+0x2d2>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb66 0603 	sbc.w	r6, r6, r3
 8000334:	2001      	movs	r0, #1
 8000336:	46b4      	mov	ip, r6
 8000338:	2d00      	cmp	r5, #0
 800033a:	d040      	beq.n	80003be <__udivmoddi4+0x16a>
 800033c:	e885 1010 	stmia.w	r5, {r4, ip}
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	b912      	cbnz	r2, 800034c <__udivmoddi4+0xf8>
 8000346:	2701      	movs	r7, #1
 8000348:	fbb7 f7f2 	udiv	r7, r7, r2
 800034c:	fab7 fe87 	clz	lr, r7
 8000350:	f1be 0f00 	cmp.w	lr, #0
 8000354:	d135      	bne.n	80003c2 <__udivmoddi4+0x16e>
 8000356:	2101      	movs	r1, #1
 8000358:	1bf6      	subs	r6, r6, r7
 800035a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800035e:	fa1f f887 	uxth.w	r8, r7
 8000362:	fbb6 f2fc 	udiv	r2, r6, ip
 8000366:	fb0c 6612 	mls	r6, ip, r2, r6
 800036a:	fb08 f002 	mul.w	r0, r8, r2
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000374:	42b0      	cmp	r0, r6
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x134>
 8000378:	19f6      	adds	r6, r6, r7
 800037a:	f102 33ff 	add.w	r3, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x132>
 8000380:	42b0      	cmp	r0, r6
 8000382:	f200 80d2 	bhi.w	800052a <__udivmoddi4+0x2d6>
 8000386:	461a      	mov	r2, r3
 8000388:	1a36      	subs	r6, r6, r0
 800038a:	fbb6 f0fc 	udiv	r0, r6, ip
 800038e:	fb0c 6610 	mls	r6, ip, r0, r6
 8000392:	fb08 f800 	mul.w	r8, r8, r0
 8000396:	b2a3      	uxth	r3, r4
 8000398:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x15c>
 80003a0:	19e4      	adds	r4, r4, r7
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x15a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80b9 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0xa0>
 80003ba:	4629      	mov	r1, r5
 80003bc:	4628      	mov	r0, r5
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80003c6:	f1ce 0320 	rsb	r3, lr, #32
 80003ca:	fa26 f203 	lsr.w	r2, r6, r3
 80003ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80003d2:	fbb2 f1fc 	udiv	r1, r2, ip
 80003d6:	fa1f f887 	uxth.w	r8, r7
 80003da:	fb0c 2211 	mls	r2, ip, r1, r2
 80003de:	fa06 f60e 	lsl.w	r6, r6, lr
 80003e2:	fa20 f303 	lsr.w	r3, r0, r3
 80003e6:	fb01 f908 	mul.w	r9, r1, r8
 80003ea:	4333      	orrs	r3, r6
 80003ec:	0c1e      	lsrs	r6, r3, #16
 80003ee:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80003f2:	45b1      	cmp	r9, r6
 80003f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x1ba>
 80003fa:	19f6      	adds	r6, r6, r7
 80003fc:	f101 32ff 	add.w	r2, r1, #4294967295
 8000400:	f080 808c 	bcs.w	800051c <__udivmoddi4+0x2c8>
 8000404:	45b1      	cmp	r9, r6
 8000406:	f240 8089 	bls.w	800051c <__udivmoddi4+0x2c8>
 800040a:	3902      	subs	r1, #2
 800040c:	443e      	add	r6, r7
 800040e:	eba6 0609 	sub.w	r6, r6, r9
 8000412:	fbb6 f0fc 	udiv	r0, r6, ip
 8000416:	fb0c 6210 	mls	r2, ip, r0, r6
 800041a:	fb00 f908 	mul.w	r9, r0, r8
 800041e:	b29e      	uxth	r6, r3
 8000420:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000424:	45b1      	cmp	r9, r6
 8000426:	d907      	bls.n	8000438 <__udivmoddi4+0x1e4>
 8000428:	19f6      	adds	r6, r6, r7
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	d271      	bcs.n	8000514 <__udivmoddi4+0x2c0>
 8000430:	45b1      	cmp	r9, r6
 8000432:	d96f      	bls.n	8000514 <__udivmoddi4+0x2c0>
 8000434:	3802      	subs	r0, #2
 8000436:	443e      	add	r6, r7
 8000438:	eba6 0609 	sub.w	r6, r6, r9
 800043c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000440:	e78f      	b.n	8000362 <__udivmoddi4+0x10e>
 8000442:	f1c1 0720 	rsb	r7, r1, #32
 8000446:	fa22 f807 	lsr.w	r8, r2, r7
 800044a:	408b      	lsls	r3, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa26 f407 	lsr.w	r4, r6, r7
 8000454:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000458:	fbb4 f9fe 	udiv	r9, r4, lr
 800045c:	fa1f fc83 	uxth.w	ip, r3
 8000460:	fb0e 4419 	mls	r4, lr, r9, r4
 8000464:	408e      	lsls	r6, r1
 8000466:	fa20 f807 	lsr.w	r8, r0, r7
 800046a:	fb09 fa0c 	mul.w	sl, r9, ip
 800046e:	ea48 0806 	orr.w	r8, r8, r6
 8000472:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000476:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800047a:	45a2      	cmp	sl, r4
 800047c:	fa02 f201 	lsl.w	r2, r2, r1
 8000480:	fa00 f601 	lsl.w	r6, r0, r1
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x244>
 8000486:	18e4      	adds	r4, r4, r3
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d244      	bcs.n	8000518 <__udivmoddi4+0x2c4>
 800048e:	45a2      	cmp	sl, r4
 8000490:	d942      	bls.n	8000518 <__udivmoddi4+0x2c4>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	441c      	add	r4, r3
 8000498:	eba4 040a 	sub.w	r4, r4, sl
 800049c:	fbb4 f0fe 	udiv	r0, r4, lr
 80004a0:	fb0e 4410 	mls	r4, lr, r0, r4
 80004a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80004a8:	fa1f f888 	uxth.w	r8, r8
 80004ac:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004b0:	45a4      	cmp	ip, r4
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x270>
 80004b4:	18e4      	adds	r4, r4, r3
 80004b6:	f100 3eff 	add.w	lr, r0, #4294967295
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2bc>
 80004bc:	45a4      	cmp	ip, r4
 80004be:	d927      	bls.n	8000510 <__udivmoddi4+0x2bc>
 80004c0:	3802      	subs	r0, #2
 80004c2:	441c      	add	r4, r3
 80004c4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c8:	fba0 8902 	umull	r8, r9, r0, r2
 80004cc:	eba4 0c0c 	sub.w	ip, r4, ip
 80004d0:	45cc      	cmp	ip, r9
 80004d2:	46c2      	mov	sl, r8
 80004d4:	46ce      	mov	lr, r9
 80004d6:	d315      	bcc.n	8000504 <__udivmoddi4+0x2b0>
 80004d8:	d012      	beq.n	8000500 <__udivmoddi4+0x2ac>
 80004da:	b155      	cbz	r5, 80004f2 <__udivmoddi4+0x29e>
 80004dc:	ebb6 030a 	subs.w	r3, r6, sl
 80004e0:	eb6c 060e 	sbc.w	r6, ip, lr
 80004e4:	fa06 f707 	lsl.w	r7, r6, r7
 80004e8:	40cb      	lsrs	r3, r1
 80004ea:	431f      	orrs	r7, r3
 80004ec:	40ce      	lsrs	r6, r1
 80004ee:	602f      	str	r7, [r5, #0]
 80004f0:	606e      	str	r6, [r5, #4]
 80004f2:	2100      	movs	r1, #0
 80004f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f8:	4610      	mov	r0, r2
 80004fa:	e6f7      	b.n	80002ec <__udivmoddi4+0x98>
 80004fc:	4689      	mov	r9, r1
 80004fe:	e6de      	b.n	80002be <__udivmoddi4+0x6a>
 8000500:	4546      	cmp	r6, r8
 8000502:	d2ea      	bcs.n	80004da <__udivmoddi4+0x286>
 8000504:	ebb8 0a02 	subs.w	sl, r8, r2
 8000508:	eb69 0e03 	sbc.w	lr, r9, r3
 800050c:	3801      	subs	r0, #1
 800050e:	e7e4      	b.n	80004da <__udivmoddi4+0x286>
 8000510:	4670      	mov	r0, lr
 8000512:	e7d7      	b.n	80004c4 <__udivmoddi4+0x270>
 8000514:	4618      	mov	r0, r3
 8000516:	e78f      	b.n	8000438 <__udivmoddi4+0x1e4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7bd      	b.n	8000498 <__udivmoddi4+0x244>
 800051c:	4611      	mov	r1, r2
 800051e:	e776      	b.n	800040e <__udivmoddi4+0x1ba>
 8000520:	3802      	subs	r0, #2
 8000522:	443c      	add	r4, r7
 8000524:	e744      	b.n	80003b0 <__udivmoddi4+0x15c>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0xe4>
 800052a:	3a02      	subs	r2, #2
 800052c:	443e      	add	r6, r7
 800052e:	e72b      	b.n	8000388 <__udivmoddi4+0x134>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_InitTick+0x3c>)
{
 8000538:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053a:	7818      	ldrb	r0, [r3, #0]
 800053c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000540:	fbb3 f3f0 	udiv	r3, r3, r0
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <HAL_InitTick+0x40>)
 8000546:	6810      	ldr	r0, [r2, #0]
 8000548:	fbb0 f0f3 	udiv	r0, r0, r3
 800054c:	f000 fbcc 	bl	8000ce8 <HAL_SYSTICK_Config>
 8000550:	4604      	mov	r4, r0
 8000552:	b958      	cbnz	r0, 800056c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000554:	2d0f      	cmp	r5, #15
 8000556:	d809      	bhi.n	800056c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	4602      	mov	r2, r0
 800055a:	4629      	mov	r1, r5
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 fb82 	bl	8000c68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_InitTick+0x44>)
 8000566:	4620      	mov	r0, r4
 8000568:	601d      	str	r5, [r3, #0]
 800056a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800056c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800056e:	bd38      	pop	{r3, r4, r5, pc}
 8000570:	20000000 	.word	0x20000000
 8000574:	20000020 	.word	0x20000020
 8000578:	20000004 	.word	0x20000004

0800057c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <HAL_Init+0x20>)
{
 800057e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000580:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000582:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000584:	f043 0310 	orr.w	r3, r3, #16
 8000588:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	f000 fb5b 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ffd0 	bl	8000534 <HAL_InitTick>
  HAL_MspInit();
 8000594:	f002 fa88 	bl	8002aa8 <HAL_MspInit>
}
 8000598:	2000      	movs	r0, #0
 800059a:	bd08      	pop	{r3, pc}
 800059c:	40022000 	.word	0x40022000

080005a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a0:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <HAL_IncTick+0x10>)
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <HAL_IncTick+0x14>)
 80005a4:	6811      	ldr	r1, [r2, #0]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	440b      	add	r3, r1
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200004b8 	.word	0x200004b8
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b8:	4b01      	ldr	r3, [pc, #4]	; (80005c0 <HAL_GetTick+0x8>)
 80005ba:	6818      	ldr	r0, [r3, #0]
}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200004b8 	.word	0x200004b8

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b538      	push	{r3, r4, r5, lr}
 80005c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005c8:	f7ff fff6 	bl	80005b8 <HAL_GetTick>
 80005cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d0:	bf1e      	ittt	ne
 80005d2:	4b04      	ldrne	r3, [pc, #16]	; (80005e4 <HAL_Delay+0x20>)
 80005d4:	781b      	ldrbne	r3, [r3, #0]
 80005d6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005d8:	f7ff ffee 	bl	80005b8 <HAL_GetTick>
 80005dc:	1b40      	subs	r0, r0, r5
 80005de:	4284      	cmp	r4, r0
 80005e0:	d8fa      	bhi.n	80005d8 <HAL_Delay+0x14>
  {
  }
}
 80005e2:	bd38      	pop	{r3, r4, r5, pc}
 80005e4:	20000000 	.word	0x20000000

080005e8 <HAL_ADC_ConvCpltCallback>:
 80005e8:	4770      	bx	lr

080005ea <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80005ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80005ec:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80005ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80005f0:	f012 0f50 	tst.w	r2, #80	; 0x50
 80005f4:	d11b      	bne.n	800062e <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80005f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80005f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	6892      	ldr	r2, [r2, #8]
 8000602:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000606:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800060a:	d10c      	bne.n	8000626 <ADC_DMAConvCplt+0x3c>
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	b952      	cbnz	r2, 8000626 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800061a:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800061c:	bf5e      	ittt	pl
 800061e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000620:	f042 0201 	orrpl.w	r2, r2, #1
 8000624:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffde 	bl	80005e8 <HAL_ADC_ConvCpltCallback>
 800062c:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800062e:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4718      	bx	r3

08000638 <HAL_ADC_ConvHalfCpltCallback>:
 8000638:	4770      	bx	lr

0800063a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800063a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800063c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800063e:	f7ff fffb 	bl	8000638 <HAL_ADC_ConvHalfCpltCallback>
 8000642:	bd08      	pop	{r3, pc}

08000644 <HAL_ADC_LevelOutOfWindowCallback>:
 8000644:	4770      	bx	lr

08000646 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000646:	6803      	ldr	r3, [r0, #0]
{
 8000648:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800064a:	685a      	ldr	r2, [r3, #4]
{
 800064c:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800064e:	0690      	lsls	r0, r2, #26
 8000650:	d527      	bpl.n	80006a2 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	0791      	lsls	r1, r2, #30
 8000656:	d524      	bpl.n	80006a2 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000658:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800065a:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800065c:	bf5e      	ittt	pl
 800065e:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000660:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000664:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800066c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000670:	d110      	bne.n	8000694 <HAL_ADC_IRQHandler+0x4e>
 8000672:	68e2      	ldr	r2, [r4, #12]
 8000674:	b972      	cbnz	r2, 8000694 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	f022 0220 	bic.w	r2, r2, #32
 800067c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800067e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000684:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000688:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800068a:	bf5e      	ittt	pl
 800068c:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800068e:	f043 0301 	orrpl.w	r3, r3, #1
 8000692:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8000694:	4620      	mov	r0, r4
 8000696:	f7ff ffa7 	bl	80005e8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800069a:	f06f 0212 	mvn.w	r2, #18
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80006a2:	6823      	ldr	r3, [r4, #0]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	0610      	lsls	r0, r2, #24
 80006a8:	d530      	bpl.n	800070c <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	0751      	lsls	r1, r2, #29
 80006ae:	d52d      	bpl.n	800070c <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006b2:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80006b4:	bf5e      	ittt	pl
 80006b6:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80006b8:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80006bc:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80006c4:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80006c8:	d00a      	beq.n	80006e0 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80006ca:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80006cc:	0550      	lsls	r0, r2, #21
 80006ce:	d416      	bmi.n	80006fe <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80006d6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80006da:	d110      	bne.n	80006fe <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80006dc:	68e2      	ldr	r2, [r4, #12]
 80006de:	b972      	cbnz	r2, 80006fe <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006e6:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80006e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006ee:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80006f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006f2:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006f4:	bf5e      	ittt	pl
 80006f6:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80006f8:	f043 0301 	orrpl.w	r3, r3, #1
 80006fc:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80006fe:	4620      	mov	r0, r4
 8000700:	f000 fa12 	bl	8000b28 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000704:	f06f 020c 	mvn.w	r2, #12
 8000708:	6823      	ldr	r3, [r4, #0]
 800070a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	0652      	lsls	r2, r2, #25
 8000712:	d50d      	bpl.n	8000730 <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	07db      	lsls	r3, r3, #31
 8000718:	d50a      	bpl.n	8000730 <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800071a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800071c:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800071e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000722:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000724:	f7ff ff8e 	bl	8000644 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000728:	f06f 0201 	mvn.w	r2, #1
 800072c:	6823      	ldr	r3, [r4, #0]
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	bd10      	pop	{r4, pc}

08000732 <HAL_ADC_ErrorCallback>:
{
 8000732:	4770      	bx	lr

08000734 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000734:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000736:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000738:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800073a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073e:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000740:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000748:	f7ff fff3 	bl	8000732 <HAL_ADC_ErrorCallback>
 800074c:	bd08      	pop	{r3, pc}
	...

08000750 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000750:	2300      	movs	r3, #0
{ 
 8000752:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000754:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000756:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800075a:	2b01      	cmp	r3, #1
 800075c:	d074      	beq.n	8000848 <HAL_ADC_ConfigChannel+0xf8>
 800075e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000760:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000762:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000766:	2d06      	cmp	r5, #6
 8000768:	6802      	ldr	r2, [r0, #0]
 800076a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800076e:	680c      	ldr	r4, [r1, #0]
 8000770:	d825      	bhi.n	80007be <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000772:	442b      	add	r3, r5
 8000774:	251f      	movs	r5, #31
 8000776:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000778:	3b05      	subs	r3, #5
 800077a:	409d      	lsls	r5, r3
 800077c:	ea26 0505 	bic.w	r5, r6, r5
 8000780:	fa04 f303 	lsl.w	r3, r4, r3
 8000784:	432b      	orrs	r3, r5
 8000786:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000788:	2c09      	cmp	r4, #9
 800078a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800078e:	688d      	ldr	r5, [r1, #8]
 8000790:	d92f      	bls.n	80007f2 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000792:	2607      	movs	r6, #7
 8000794:	4423      	add	r3, r4
 8000796:	68d1      	ldr	r1, [r2, #12]
 8000798:	3b1e      	subs	r3, #30
 800079a:	409e      	lsls	r6, r3
 800079c:	ea21 0106 	bic.w	r1, r1, r6
 80007a0:	fa05 f303 	lsl.w	r3, r5, r3
 80007a4:	430b      	orrs	r3, r1
 80007a6:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80007a8:	f1a4 0310 	sub.w	r3, r4, #16
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d92b      	bls.n	8000808 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007b0:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	b002      	add	sp, #8
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80007be:	2d0c      	cmp	r5, #12
 80007c0:	d80b      	bhi.n	80007da <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007c2:	442b      	add	r3, r5
 80007c4:	251f      	movs	r5, #31
 80007c6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80007c8:	3b23      	subs	r3, #35	; 0x23
 80007ca:	409d      	lsls	r5, r3
 80007cc:	ea26 0505 	bic.w	r5, r6, r5
 80007d0:	fa04 f303 	lsl.w	r3, r4, r3
 80007d4:	432b      	orrs	r3, r5
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
 80007d8:	e7d6      	b.n	8000788 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80007da:	442b      	add	r3, r5
 80007dc:	251f      	movs	r5, #31
 80007de:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80007e0:	3b41      	subs	r3, #65	; 0x41
 80007e2:	409d      	lsls	r5, r3
 80007e4:	ea26 0505 	bic.w	r5, r6, r5
 80007e8:	fa04 f303 	lsl.w	r3, r4, r3
 80007ec:	432b      	orrs	r3, r5
 80007ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007f0:	e7ca      	b.n	8000788 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80007f2:	2607      	movs	r6, #7
 80007f4:	6911      	ldr	r1, [r2, #16]
 80007f6:	4423      	add	r3, r4
 80007f8:	409e      	lsls	r6, r3
 80007fa:	ea21 0106 	bic.w	r1, r1, r6
 80007fe:	fa05 f303 	lsl.w	r3, r5, r3
 8000802:	430b      	orrs	r3, r1
 8000804:	6113      	str	r3, [r2, #16]
 8000806:	e7cf      	b.n	80007a8 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_ADC_ConfigChannel+0xfc>)
 800080a:	429a      	cmp	r2, r3
 800080c:	d116      	bne.n	800083c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800080e:	6893      	ldr	r3, [r2, #8]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	d4cd      	bmi.n	80007b0 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000814:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000816:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000818:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800081c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800081e:	d1c7      	bne.n	80007b0 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_ADC_ConfigChannel+0x100>)
 8000822:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <HAL_ADC_ConfigChannel+0x104>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	fbb3 f2f2 	udiv	r2, r3, r2
 800082a:	230a      	movs	r3, #10
 800082c:	4353      	muls	r3, r2
            wait_loop_index--;
 800082e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000830:	9b01      	ldr	r3, [sp, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0bc      	beq.n	80007b0 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000836:	9b01      	ldr	r3, [sp, #4]
 8000838:	3b01      	subs	r3, #1
 800083a:	e7f8      	b.n	800082e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800083c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800083e:	f043 0320 	orr.w	r3, r3, #32
 8000842:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	e7b4      	b.n	80007b2 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000848:	2302      	movs	r3, #2
 800084a:	e7b5      	b.n	80007b8 <HAL_ADC_ConfigChannel+0x68>
 800084c:	40012400 	.word	0x40012400
 8000850:	20000020 	.word	0x20000020
 8000854:	000f4240 	.word	0x000f4240

08000858 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000858:	2300      	movs	r3, #0
{
 800085a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800085c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800085e:	6803      	ldr	r3, [r0, #0]
{
 8000860:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	07d2      	lsls	r2, r2, #31
 8000866:	d502      	bpl.n	800086e <ADC_Enable+0x16>
  return HAL_OK;
 8000868:	2000      	movs	r0, #0
}
 800086a:	b002      	add	sp, #8
 800086c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	f042 0201 	orr.w	r2, r2, #1
 8000874:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <ADC_Enable+0x68>)
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <ADC_Enable+0x6c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000880:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000882:	9b01      	ldr	r3, [sp, #4]
 8000884:	b9c3      	cbnz	r3, 80008b8 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000886:	f7ff fe97 	bl	80005b8 <HAL_GetTick>
 800088a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	689d      	ldr	r5, [r3, #8]
 8000890:	f015 0501 	ands.w	r5, r5, #1
 8000894:	d1e8      	bne.n	8000868 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000896:	f7ff fe8f 	bl	80005b8 <HAL_GetTick>
 800089a:	1b80      	subs	r0, r0, r6
 800089c:	2802      	cmp	r0, #2
 800089e:	d9f5      	bls.n	800088c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80008a2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80008ae:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008b6:	e7d8      	b.n	800086a <ADC_Enable+0x12>
      wait_loop_index--;
 80008b8:	9b01      	ldr	r3, [sp, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	e7e0      	b.n	8000880 <ADC_Enable+0x28>
 80008be:	bf00      	nop
 80008c0:	20000020 	.word	0x20000020
 80008c4:	000f4240 	.word	0x000f4240

080008c8 <HAL_ADC_Start_DMA>:
{
 80008c8:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80008cc:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80008ce:	4b40      	ldr	r3, [pc, #256]	; (80009d0 <HAL_ADC_Start_DMA+0x108>)
 80008d0:	6802      	ldr	r2, [r0, #0]
{
 80008d2:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80008d4:	429a      	cmp	r2, r3
{
 80008d6:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80008d8:	d002      	beq.n	80008e0 <HAL_ADC_Start_DMA+0x18>
 80008da:	493e      	ldr	r1, [pc, #248]	; (80009d4 <HAL_ADC_Start_DMA+0x10c>)
 80008dc:	428a      	cmp	r2, r1
 80008de:	d103      	bne.n	80008e8 <HAL_ADC_Start_DMA+0x20>
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80008e6:	d16e      	bne.n	80009c6 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80008e8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d06c      	beq.n	80009ca <HAL_ADC_Start_DMA+0x102>
 80008f0:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80008f2:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80008f4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80008f8:	f7ff ffae 	bl	8000858 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80008fc:	4606      	mov	r6, r0
 80008fe:	2800      	cmp	r0, #0
 8000900:	d15d      	bne.n	80009be <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000902:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000904:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000906:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800090a:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800090c:	f020 0001 	bic.w	r0, r0, #1
 8000910:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000914:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000916:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000918:	d104      	bne.n	8000924 <HAL_ADC_Start_DMA+0x5c>
 800091a:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <HAL_ADC_Start_DMA+0x108>)
 800091c:	6853      	ldr	r3, [r2, #4]
 800091e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000922:	d13e      	bne.n	80009a2 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000926:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800092a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800092c:	684b      	ldr	r3, [r1, #4]
 800092e:	055a      	lsls	r2, r3, #21
 8000930:	d505      	bpl.n	800093e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000932:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000934:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800093c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800093e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000940:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000942:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000946:	bf18      	it	ne
 8000948:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800094a:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800094c:	bf18      	it	ne
 800094e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000952:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000954:	2300      	movs	r3, #0
 8000956:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800095c:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800095e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <HAL_ADC_Start_DMA+0x114>)
 8000962:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <HAL_ADC_Start_DMA+0x118>)
 8000966:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000968:	f06f 0302 	mvn.w	r3, #2
 800096c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000970:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000978:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800097c:	4643      	mov	r3, r8
 800097e:	f000 fa8b 	bl	8000e98 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800098a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	bf0c      	ite	eq
 8000992:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000996:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800099a:	609a      	str	r2, [r3, #8]
}
 800099c:	4630      	mov	r0, r6
 800099e:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009a8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009aa:	6853      	ldr	r3, [r2, #4]
 80009ac:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009ae:	bf41      	itttt	mi
 80009b0:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80009b2:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80009b6:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80009ba:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80009bc:	e7bf      	b.n	800093e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80009be:	2300      	movs	r3, #0
 80009c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80009c4:	e7ea      	b.n	800099c <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80009c6:	2601      	movs	r6, #1
 80009c8:	e7e8      	b.n	800099c <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80009ca:	2602      	movs	r6, #2
 80009cc:	e7e6      	b.n	800099c <HAL_ADC_Start_DMA+0xd4>
 80009ce:	bf00      	nop
 80009d0:	40012400 	.word	0x40012400
 80009d4:	40012800 	.word	0x40012800
 80009d8:	080005eb 	.word	0x080005eb
 80009dc:	0800063b 	.word	0x0800063b
 80009e0:	08000735 	.word	0x08000735

080009e4 <ADC_ConversionStop_Disable>:
{
 80009e4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009e6:	6803      	ldr	r3, [r0, #0]
{
 80009e8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	07d2      	lsls	r2, r2, #31
 80009ee:	d401      	bmi.n	80009f4 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80009f0:	2000      	movs	r0, #0
 80009f2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	f022 0201 	bic.w	r2, r2, #1
 80009fa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80009fc:	f7ff fddc 	bl	80005b8 <HAL_GetTick>
 8000a00:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a02:	6823      	ldr	r3, [r4, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	07db      	lsls	r3, r3, #31
 8000a08:	d5f2      	bpl.n	80009f0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a0a:	f7ff fdd5 	bl	80005b8 <HAL_GetTick>
 8000a0e:	1b40      	subs	r0, r0, r5
 8000a10:	2802      	cmp	r0, #2
 8000a12:	d9f6      	bls.n	8000a02 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a16:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a18:	f043 0310 	orr.w	r3, r3, #16
 8000a1c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a26:	bd38      	pop	{r3, r4, r5, pc}

08000a28 <HAL_ADC_Init>:
{
 8000a28:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d071      	beq.n	8000b14 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a32:	b923      	cbnz	r3, 8000a3e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000a34:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000a36:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000a3a:	f002 f87b 	bl	8002b34 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f7ff ffd0 	bl	80009e4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a46:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a4c:	d164      	bne.n	8000b18 <HAL_ADC_Init+0xf0>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d162      	bne.n	8000b18 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000a52:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000a54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000a58:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000a5a:	f023 0302 	bic.w	r3, r3, #2
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000a62:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a64:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000a66:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000a68:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a6a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000a6e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a72:	d038      	beq.n	8000ae6 <HAL_ADC_Init+0xbe>
 8000a74:	2901      	cmp	r1, #1
 8000a76:	bf14      	ite	ne
 8000a78:	4606      	movne	r6, r0
 8000a7a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a7e:	6965      	ldr	r5, [r4, #20]
 8000a80:	2d01      	cmp	r5, #1
 8000a82:	d107      	bne.n	8000a94 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d130      	bne.n	8000aea <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a88:	69a3      	ldr	r3, [r4, #24]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000a90:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000a94:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a96:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000a9a:	685d      	ldr	r5, [r3, #4]
 8000a9c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000aa0:	ea45 0506 	orr.w	r5, r5, r6
 8000aa4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000aa6:	689e      	ldr	r6, [r3, #8]
 8000aa8:	4d1d      	ldr	r5, [pc, #116]	; (8000b20 <HAL_ADC_Init+0xf8>)
 8000aaa:	ea05 0506 	and.w	r5, r5, r6
 8000aae:	ea45 0502 	orr.w	r5, r5, r2
 8000ab2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ab4:	d001      	beq.n	8000aba <HAL_ADC_Init+0x92>
 8000ab6:	2901      	cmp	r1, #1
 8000ab8:	d120      	bne.n	8000afc <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aba:	6921      	ldr	r1, [r4, #16]
 8000abc:	3901      	subs	r1, #1
 8000abe:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000ac0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000ac2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000ac6:	4329      	orrs	r1, r5
 8000ac8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aca:	6899      	ldr	r1, [r3, #8]
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_ADC_Init+0xfc>)
 8000ace:	400b      	ands	r3, r1
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d115      	bne.n	8000b00 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ada:	f023 0303 	bic.w	r3, r3, #3
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ae4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ae6:	460e      	mov	r6, r1
 8000ae8:	e7c9      	b.n	8000a7e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000afa:	e7cb      	b.n	8000a94 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000afc:	2100      	movs	r1, #0
 8000afe:	e7df      	b.n	8000ac0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000b00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b02:	f023 0312 	bic.w	r3, r3, #18
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000b14:	2001      	movs	r0, #1
}
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b1e:	e7f9      	b.n	8000b14 <HAL_ADC_Init+0xec>
 8000b20:	ffe1f7fd 	.word	0xffe1f7fd
 8000b24:	ff1f0efe 	.word	0xff1f0efe

08000b28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b28:	4770      	bx	lr

08000b2a <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000b2a:	b570      	push	{r4, r5, r6, lr}
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
  uint32_t tickstart = 0U;
  uint32_t tmp_mcr = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d069      	beq.n	8000c06 <HAL_CAN_Init+0xdc>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000b32:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000b36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b3a:	b91b      	cbnz	r3, 8000b44 <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000b3c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000b40:	f002 f842 	bl	8002bc8 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000b44:	2302      	movs	r3, #2
 8000b46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b4a:	6823      	ldr	r3, [r4, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	f022 0202 	bic.w	r2, r2, #2
 8000b52:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	f042 0201 	orr.w	r2, r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 8000b5c:	f7ff fd2c 	bl	80005b8 <HAL_GetTick>
 8000b60:	4606      	mov	r6, r0
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000b62:	6822      	ldr	r2, [r4, #0]
 8000b64:	6855      	ldr	r5, [r2, #4]
 8000b66:	f015 0501 	ands.w	r5, r5, #1
 8000b6a:	d04e      	beq.n	8000c0a <HAL_CAN_Init+0xe0>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000b6c:	6853      	ldr	r3, [r2, #4]
 8000b6e:	07d9      	lsls	r1, r3, #31
 8000b70:	d546      	bpl.n	8000c00 <HAL_CAN_Init+0xd6>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000b72:	69a3      	ldr	r3, [r4, #24]
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000b74:	69e1      	ldr	r1, [r4, #28]
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	bf0c      	ite	eq
 8000b7a:	2380      	moveq	r3, #128	; 0x80
 8000b7c:	2300      	movne	r3, #0
    if (hcan->Init.ABOM == ENABLE)
 8000b7e:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000b80:	6a21      	ldr	r1, [r4, #32]
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 8000b82:	bf0c      	ite	eq
 8000b84:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
 8000b88:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
    if (hcan->Init.AWUM == ENABLE)
 8000b8c:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
    }
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000b8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 8000b90:	bf0c      	ite	eq
 8000b92:	f043 0320 	orreq.w	r3, r3, #32
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
 8000b96:	f023 0320 	bicne.w	r3, r3, #32
    if (hcan->Init.NART == ENABLE)
 8000b9a:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000b9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 8000b9e:	bf0c      	ite	eq
 8000ba0:	f043 0310 	orreq.w	r3, r3, #16
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
 8000ba4:	f023 0310 	bicne.w	r3, r3, #16
    if (hcan->Init.RFLM == ENABLE)
 8000ba8:	2901      	cmp	r1, #1
    else
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
    }
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000baa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 8000bac:	bf0c      	ite	eq
 8000bae:	f043 0308 	orreq.w	r3, r3, #8
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
 8000bb2:	f023 0308 	bicne.w	r3, r3, #8
    if (hcan->Init.TXFP == ENABLE)
 8000bb6:	2901      	cmp	r1, #1
    {
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 8000bb8:	6811      	ldr	r1, [r2, #0]
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 8000bba:	bf0c      	ite	eq
 8000bbc:	f043 0304 	orreq.w	r3, r3, #4
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
 8000bc0:	f023 0304 	bicne.w	r3, r3, #4
    MODIFY_REG(hcan->Instance->MCR,
 8000bc4:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6013      	str	r3, [r2, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bcc:	68e1      	ldr	r1, [r4, #12]
 8000bce:	68a3      	ldr	r3, [r4, #8]
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6921      	ldr	r1, [r4, #16]
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	6961      	ldr	r1, [r4, #20]
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	6861      	ldr	r1, [r4, #4]
 8000bdc:	3901      	subs	r1, #1
 8000bde:	430b      	orrs	r3, r1
 8000be0:	61d3      	str	r3, [r2, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U)));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000be2:	6813      	ldr	r3, [r2, #0]
 8000be4:	f023 0301 	bic.w	r3, r3, #1
 8000be8:	6013      	str	r3, [r2, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 8000bea:	f7ff fce5 	bl	80005b8 <HAL_GetTick>
 8000bee:	4605      	mov	r5, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	07d2      	lsls	r2, r2, #31
 8000bf6:	d413      	bmi.n	8000c20 <HAL_CAN_Init+0xf6>
        return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000bf8:	6858      	ldr	r0, [r3, #4]
 8000bfa:	f010 0001 	ands.w	r0, r0, #1
 8000bfe:	d01b      	beq.n	8000c38 <HAL_CAN_Init+0x10e>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000c00:	2304      	movs	r3, #4
 8000c02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 8000c06:	2001      	movs	r0, #1
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000c0a:	f7ff fcd5 	bl	80005b8 <HAL_GetTick>
 8000c0e:	1b80      	subs	r0, r0, r6
 8000c10:	280a      	cmp	r0, #10
 8000c12:	d9a6      	bls.n	8000b62 <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000c14:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 8000c16:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000c1a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000c20:	f7ff fcca 	bl	80005b8 <HAL_GetTick>
 8000c24:	1b40      	subs	r0, r0, r5
 8000c26:	280a      	cmp	r0, #10
 8000c28:	d9e2      	bls.n	8000bf0 <HAL_CAN_Init+0xc6>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000c2a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 8000c2c:	2300      	movs	r3, #0
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000c2e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_UNLOCK(hcan);
 8000c32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 8000c38:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c3a:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8000c3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  }
}
 8000c40:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c46:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c4a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c52:	041b      	lsls	r3, r3, #16
 8000c54:	0c1b      	lsrs	r3, r3, #16
 8000c56:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000c5e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c60:	60d3      	str	r3, [r2, #12]
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6a:	b530      	push	{r4, r5, lr}
 8000c6c:	68dc      	ldr	r4, [r3, #12]
 8000c6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c72:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	bf28      	it	cs
 8000c7c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c84:	bf98      	it	ls
 8000c86:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	fa05 f303 	lsl.w	r3, r5, r3
 8000c8c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c90:	bf88      	it	hi
 8000c92:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4019      	ands	r1, r3
 8000c96:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	fa05 f404 	lsl.w	r4, r5, r4
 8000c9c:	3c01      	subs	r4, #1
 8000c9e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ca0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca2:	ea42 0201 	orr.w	r2, r2, r1
 8000ca6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	bfaf      	iteee	ge
 8000cac:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	4b06      	ldrlt	r3, [pc, #24]	; (8000ccc <HAL_NVIC_SetPriority+0x64>)
 8000cb2:	f000 000f 	andlt.w	r0, r0, #15
 8000cb6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	bfa5      	ittet	ge
 8000cba:	b2d2      	uxtbge	r2, r2
 8000cbc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000cc6:	bd30      	pop	{r4, r5, pc}
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	e000ed14 	.word	0xe000ed14

08000cd0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	0942      	lsrs	r2, r0, #5
 8000cd4:	f000 001f 	and.w	r0, r0, #31
 8000cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8000cdc:	4b01      	ldr	r3, [pc, #4]	; (8000ce4 <HAL_NVIC_EnableIRQ+0x14>)
 8000cde:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	3801      	subs	r0, #1
 8000cea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cee:	d20a      	bcs.n	8000d06 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d16:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	bf0c      	ite	eq
 8000d1c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d20:	f022 0204 	bicne.w	r2, r2, #4
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	4770      	bx	lr
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d2c:	4770      	bx	lr

08000d2e <HAL_SYSTICK_IRQHandler>:
{
 8000d2e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000d30:	f7ff fffc 	bl	8000d2c <HAL_SYSTICK_Callback>
 8000d34:	bd08      	pop	{r3, pc}

08000d36 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000d36:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000d38:	4604      	mov	r4, r0
 8000d3a:	b168      	cbz	r0, 8000d58 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000d3c:	7903      	ldrb	r3, [r0, #4]
 8000d3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d42:	b913      	cbnz	r3, 8000d4a <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000d44:	7142      	strb	r2, [r0, #5]
    
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000d46:	f001 ff6b 	bl	8002c20 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d4a:	2302      	movs	r3, #2
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d4c:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d4e:	7123      	strb	r3, [r4, #4]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d50:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d52:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000d54:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000d56:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000d58:	2001      	movs	r0, #1
}
 8000d5a:	bd10      	pop	{r4, pc}

08000d5c <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000d5c:	7943      	ldrb	r3, [r0, #5]
{
 8000d5e:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	f04f 0302 	mov.w	r3, #2
 8000d66:	d015      	beq.n	8000d94 <HAL_DAC_Start+0x38>
 8000d68:	2201      	movs	r2, #1
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d6a:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000d6c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 8000d6e:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8000d70:	681c      	ldr	r4, [r3, #0]
 8000d72:	408a      	lsls	r2, r1
 8000d74:	4322      	orrs	r2, r4
 8000d76:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8000d78:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 8000d7a:	b969      	cbnz	r1, 8000d98 <HAL_DAC_Start+0x3c>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8000d7c:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8000d80:	2a3c      	cmp	r2, #60	; 0x3c
 8000d82:	d103      	bne.n	8000d8c <HAL_DAC_Start+0x30>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000d8a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d90:	2300      	movs	r3, #0
 8000d92:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8000d94:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 8000d96:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8000d98:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8000d9c:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 8000da0:	d1f4      	bne.n	8000d8c <HAL_DAC_Start+0x30>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	f042 0202 	orr.w	r2, r2, #2
 8000da8:	e7ef      	b.n	8000d8a <HAL_DAC_Start+0x2e>

08000daa <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000daa:	7943      	ldrb	r3, [r0, #5]
{
 8000dac:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	f04f 0302 	mov.w	r3, #2
 8000db4:	d017      	beq.n	8000de6 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000db6:	7103      	strb	r3, [r0, #4]
  
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  SET_BIT(tmpreg1, (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer));
 8000db8:	c90a      	ldmia	r1, {r1, r3}
 8000dba:	430b      	orrs	r3, r1
  
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */  
  /* Calculate CR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->CR,
 8000dbc:	f640 71fe 	movw	r1, #4094	; 0xffe
 8000dc0:	6804      	ldr	r4, [r0, #0]
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	6825      	ldr	r5, [r4, #0]
 8000dc6:	4093      	lsls	r3, r2
 8000dc8:	ea25 0101 	bic.w	r1, r5, r1
 8000dcc:	430b      	orrs	r3, r1
             ((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel,
             tmpreg1 << Channel);

  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000dce:	21c0      	movs	r1, #192	; 0xc0
  MODIFY_REG(hdac->Instance->CR,
 8000dd0:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000ddc:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000dde:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000de0:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000de2:	2300      	movs	r3, #0
 8000de4:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8000de6:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8000de8:	bd30      	pop	{r4, r5, pc}

08000dea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8000dea:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 8000dec:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8000dee:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 8000df0:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 8000df2:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 8000df4:	b941      	cbnz	r1, 8000e08 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000df6:	9901      	ldr	r1, [sp, #4]
 8000df8:	3108      	adds	r1, #8
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
  
  /* Return function status */
  return HAL_OK;
}
 8000dfa:	2000      	movs	r0, #0
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000dfc:	440a      	add	r2, r1
 8000dfe:	9201      	str	r2, [sp, #4]
  *(__IO uint32_t *) tmp = Data;
 8000e00:	9a01      	ldr	r2, [sp, #4]
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	b002      	add	sp, #8
 8000e06:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000e08:	9901      	ldr	r1, [sp, #4]
 8000e0a:	3114      	adds	r1, #20
 8000e0c:	e7f5      	b.n	8000dfa <HAL_DAC_SetValue+0x10>
	...

08000e10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e10:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d036      	beq.n	8000e84 <HAL_DMA_Init+0x74>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e16:	6801      	ldr	r1, [r0, #0]
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_DMA_Init+0x78>)
 8000e1a:	2414      	movs	r4, #20
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d829      	bhi.n	8000e74 <HAL_DMA_Init+0x64>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e20:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA1;
 8000e22:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e26:	440a      	add	r2, r1
 8000e28:	fbb2 f2f4 	udiv	r2, r2, r4
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e30:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 8000e32:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000e34:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000e36:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000e38:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3a:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e3c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e40:	4323      	orrs	r3, r4
 8000e42:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e44:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e48:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4a:	6944      	ldr	r4, [r0, #20]
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	6984      	ldr	r4, [r0, #24]
 8000e50:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e52:	69c4      	ldr	r4, [r0, #28]
 8000e54:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000e56:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e58:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e5a:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8000e5c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000e5e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8000e62:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000e64:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000e66:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000e68:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6a:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e6c:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8000e70:	4618      	mov	r0, r3
 8000e72:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_DMA_Init+0x80>)
 8000e76:	440b      	add	r3, r1
 8000e78:	fbb3 f3f4 	udiv	r3, r3, r4
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <HAL_DMA_Init+0x84>)
 8000e82:	e7d5      	b.n	8000e30 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8000e84:	2001      	movs	r0, #1
}
 8000e86:	bd10      	pop	{r4, pc}
 8000e88:	40020407 	.word	0x40020407
 8000e8c:	bffdfff8 	.word	0xbffdfff8
 8000e90:	bffdfbf8 	.word	0xbffdfbf8
 8000e94:	40020400 	.word	0x40020400

08000e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e9a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000e9e:	2c01      	cmp	r4, #1
 8000ea0:	d035      	beq.n	8000f0e <HAL_DMA_Start_IT+0x76>
 8000ea2:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ea4:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000ea8:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f04f 0600 	mov.w	r6, #0
 8000eb2:	f04f 0402 	mov.w	r4, #2
 8000eb6:	d128      	bne.n	8000f0a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eb8:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ebc:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ebe:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000ec0:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ec2:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000ec4:	f026 0601 	bic.w	r6, r6, #1
 8000ec8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eca:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000ecc:	40bd      	lsls	r5, r7
 8000ece:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ed0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ed2:	6843      	ldr	r3, [r0, #4]
 8000ed4:	6805      	ldr	r5, [r0, #0]
 8000ed6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000ed8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000eda:	bf0b      	itete	eq
 8000edc:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000ede:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000ee0:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000ee2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000ee4:	b14b      	cbz	r3, 8000efa <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000eec:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000eee:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	602b      	str	r3, [r5, #0]
 8000ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	f043 030a 	orr.w	r3, r3, #10
 8000f08:	e7f0      	b.n	8000eec <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000f0a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000f0e:	2002      	movs	r0, #2
}
 8000f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000f14 <HAL_DMA_IRQHandler>:
{
 8000f14:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f16:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f18:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f1a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f1c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000f1e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f20:	4095      	lsls	r5, r2
 8000f22:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000f24:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f26:	d055      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0xc0>
 8000f28:	074d      	lsls	r5, r1, #29
 8000f2a:	d553      	bpl.n	8000fd4 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f30:	bf5e      	ittt	pl
 8000f32:	681a      	ldrpl	r2, [r3, #0]
 8000f34:	f022 0204 	bicpl.w	r2, r2, #4
 8000f38:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f3a:	4a60      	ldr	r2, [pc, #384]	; (80010bc <HAL_DMA_IRQHandler+0x1a8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d91f      	bls.n	8000f80 <HAL_DMA_IRQHandler+0x6c>
 8000f40:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d014      	beq.n	8000f72 <HAL_DMA_IRQHandler+0x5e>
 8000f48:	3214      	adds	r2, #20
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_DMA_IRQHandler+0x62>
 8000f4e:	3214      	adds	r2, #20
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d012      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x66>
 8000f54:	3214      	adds	r2, #20
 8000f56:	4293      	cmp	r3, r2
 8000f58:	bf0c      	ite	eq
 8000f5a:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8000f5e:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8000f62:	4a57      	ldr	r2, [pc, #348]	; (80010c0 <HAL_DMA_IRQHandler+0x1ac>)
 8000f64:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000f66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80a5 	beq.w	80010b8 <HAL_DMA_IRQHandler+0x1a4>
}
 8000f6e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000f70:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f72:	2304      	movs	r3, #4
 8000f74:	e7f5      	b.n	8000f62 <HAL_DMA_IRQHandler+0x4e>
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	e7f3      	b.n	8000f62 <HAL_DMA_IRQHandler+0x4e>
 8000f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7e:	e7f0      	b.n	8000f62 <HAL_DMA_IRQHandler+0x4e>
 8000f80:	4950      	ldr	r1, [pc, #320]	; (80010c4 <HAL_DMA_IRQHandler+0x1b0>)
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d016      	beq.n	8000fb4 <HAL_DMA_IRQHandler+0xa0>
 8000f86:	3114      	adds	r1, #20
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d015      	beq.n	8000fb8 <HAL_DMA_IRQHandler+0xa4>
 8000f8c:	3114      	adds	r1, #20
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d014      	beq.n	8000fbc <HAL_DMA_IRQHandler+0xa8>
 8000f92:	3114      	adds	r1, #20
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d014      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0xae>
 8000f98:	3114      	adds	r1, #20
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	d014      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0xb4>
 8000f9e:	3114      	adds	r1, #20
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d014      	beq.n	8000fce <HAL_DMA_IRQHandler+0xba>
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	bf14      	ite	ne
 8000fa8:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8000fac:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8000fb0:	4a45      	ldr	r2, [pc, #276]	; (80010c8 <HAL_DMA_IRQHandler+0x1b4>)
 8000fb2:	e7d7      	b.n	8000f64 <HAL_DMA_IRQHandler+0x50>
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	e7fb      	b.n	8000fb0 <HAL_DMA_IRQHandler+0x9c>
 8000fb8:	2340      	movs	r3, #64	; 0x40
 8000fba:	e7f9      	b.n	8000fb0 <HAL_DMA_IRQHandler+0x9c>
 8000fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc0:	e7f6      	b.n	8000fb0 <HAL_DMA_IRQHandler+0x9c>
 8000fc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fc6:	e7f3      	b.n	8000fb0 <HAL_DMA_IRQHandler+0x9c>
 8000fc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fcc:	e7f0      	b.n	8000fb0 <HAL_DMA_IRQHandler+0x9c>
 8000fce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd2:	e7ed      	b.n	8000fb0 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000fd4:	2502      	movs	r5, #2
 8000fd6:	4095      	lsls	r5, r2
 8000fd8:	4225      	tst	r5, r4
 8000fda:	d057      	beq.n	800108c <HAL_DMA_IRQHandler+0x178>
 8000fdc:	078d      	lsls	r5, r1, #30
 8000fde:	d555      	bpl.n	800108c <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	0694      	lsls	r4, r2, #26
 8000fe4:	d406      	bmi.n	8000ff4 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	f022 020a 	bic.w	r2, r2, #10
 8000fec:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ff4:	4a31      	ldr	r2, [pc, #196]	; (80010bc <HAL_DMA_IRQHandler+0x1a8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d91e      	bls.n	8001038 <HAL_DMA_IRQHandler+0x124>
 8000ffa:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_DMA_IRQHandler+0x116>
 8001002:	3214      	adds	r2, #20
 8001004:	4293      	cmp	r3, r2
 8001006:	d012      	beq.n	800102e <HAL_DMA_IRQHandler+0x11a>
 8001008:	3214      	adds	r2, #20
 800100a:	4293      	cmp	r3, r2
 800100c:	d011      	beq.n	8001032 <HAL_DMA_IRQHandler+0x11e>
 800100e:	3214      	adds	r2, #20
 8001010:	4293      	cmp	r3, r2
 8001012:	bf0c      	ite	eq
 8001014:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001018:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 800101c:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <HAL_DMA_IRQHandler+0x1ac>)
 800101e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001020:	2300      	movs	r3, #0
 8001022:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001026:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001028:	e79e      	b.n	8000f68 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800102a:	2302      	movs	r3, #2
 800102c:	e7f6      	b.n	800101c <HAL_DMA_IRQHandler+0x108>
 800102e:	2320      	movs	r3, #32
 8001030:	e7f4      	b.n	800101c <HAL_DMA_IRQHandler+0x108>
 8001032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001036:	e7f1      	b.n	800101c <HAL_DMA_IRQHandler+0x108>
 8001038:	4922      	ldr	r1, [pc, #136]	; (80010c4 <HAL_DMA_IRQHandler+0x1b0>)
 800103a:	428b      	cmp	r3, r1
 800103c:	d016      	beq.n	800106c <HAL_DMA_IRQHandler+0x158>
 800103e:	3114      	adds	r1, #20
 8001040:	428b      	cmp	r3, r1
 8001042:	d015      	beq.n	8001070 <HAL_DMA_IRQHandler+0x15c>
 8001044:	3114      	adds	r1, #20
 8001046:	428b      	cmp	r3, r1
 8001048:	d014      	beq.n	8001074 <HAL_DMA_IRQHandler+0x160>
 800104a:	3114      	adds	r1, #20
 800104c:	428b      	cmp	r3, r1
 800104e:	d014      	beq.n	800107a <HAL_DMA_IRQHandler+0x166>
 8001050:	3114      	adds	r1, #20
 8001052:	428b      	cmp	r3, r1
 8001054:	d014      	beq.n	8001080 <HAL_DMA_IRQHandler+0x16c>
 8001056:	3114      	adds	r1, #20
 8001058:	428b      	cmp	r3, r1
 800105a:	d014      	beq.n	8001086 <HAL_DMA_IRQHandler+0x172>
 800105c:	4293      	cmp	r3, r2
 800105e:	bf14      	ite	ne
 8001060:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001064:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001068:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <HAL_DMA_IRQHandler+0x1b4>)
 800106a:	e7d8      	b.n	800101e <HAL_DMA_IRQHandler+0x10a>
 800106c:	2302      	movs	r3, #2
 800106e:	e7fb      	b.n	8001068 <HAL_DMA_IRQHandler+0x154>
 8001070:	2320      	movs	r3, #32
 8001072:	e7f9      	b.n	8001068 <HAL_DMA_IRQHandler+0x154>
 8001074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001078:	e7f6      	b.n	8001068 <HAL_DMA_IRQHandler+0x154>
 800107a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107e:	e7f3      	b.n	8001068 <HAL_DMA_IRQHandler+0x154>
 8001080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001084:	e7f0      	b.n	8001068 <HAL_DMA_IRQHandler+0x154>
 8001086:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800108a:	e7ed      	b.n	8001068 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800108c:	2508      	movs	r5, #8
 800108e:	4095      	lsls	r5, r2
 8001090:	4225      	tst	r5, r4
 8001092:	d011      	beq.n	80010b8 <HAL_DMA_IRQHandler+0x1a4>
 8001094:	0709      	lsls	r1, r1, #28
 8001096:	d50f      	bpl.n	80010b8 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001098:	6819      	ldr	r1, [r3, #0]
 800109a:	f021 010e 	bic.w	r1, r1, #14
 800109e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010a0:	2301      	movs	r3, #1
 80010a2:	fa03 f202 	lsl.w	r2, r3, r2
 80010a6:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010a8:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80010aa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80010ae:	2300      	movs	r3, #0
 80010b0:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80010b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80010b6:	e757      	b.n	8000f68 <HAL_DMA_IRQHandler+0x54>
}
 80010b8:	bc70      	pop	{r4, r5, r6}
 80010ba:	4770      	bx	lr
 80010bc:	40020080 	.word	0x40020080
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020008 	.word	0x40020008
 80010c8:	40020000 	.word	0x40020000

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80010d0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	4616      	mov	r6, r2
 80010d4:	4b65      	ldr	r3, [pc, #404]	; (800126c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010d6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800127c <HAL_GPIO_Init+0x1b0>
 80010da:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001280 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80010de:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80010e4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80010ec:	45a0      	cmp	r8, r4
 80010ee:	d17f      	bne.n	80011f0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80010f0:	684d      	ldr	r5, [r1, #4]
 80010f2:	2d12      	cmp	r5, #18
 80010f4:	f000 80af 	beq.w	8001256 <HAL_GPIO_Init+0x18a>
 80010f8:	f200 8088 	bhi.w	800120c <HAL_GPIO_Init+0x140>
 80010fc:	2d02      	cmp	r5, #2
 80010fe:	f000 80a7 	beq.w	8001250 <HAL_GPIO_Init+0x184>
 8001102:	d87c      	bhi.n	80011fe <HAL_GPIO_Init+0x132>
 8001104:	2d00      	cmp	r5, #0
 8001106:	f000 808e 	beq.w	8001226 <HAL_GPIO_Init+0x15a>
 800110a:	2d01      	cmp	r5, #1
 800110c:	f000 809e 	beq.w	800124c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001110:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001114:	2cff      	cmp	r4, #255	; 0xff
 8001116:	bf93      	iteet	ls
 8001118:	4682      	movls	sl, r0
 800111a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800111e:	3d08      	subhi	r5, #8
 8001120:	f8d0 b000 	ldrls.w	fp, [r0]
 8001124:	bf92      	itee	ls
 8001126:	00b5      	lslls	r5, r6, #2
 8001128:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800112c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800112e:	fa09 f805 	lsl.w	r8, r9, r5
 8001132:	ea2b 0808 	bic.w	r8, fp, r8
 8001136:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800113a:	bf88      	it	hi
 800113c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001140:	ea48 0505 	orr.w	r5, r8, r5
 8001144:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001148:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800114c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001150:	d04e      	beq.n	80011f0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001152:	4d47      	ldr	r5, [pc, #284]	; (8001270 <HAL_GPIO_Init+0x1a4>)
 8001154:	4f46      	ldr	r7, [pc, #280]	; (8001270 <HAL_GPIO_Init+0x1a4>)
 8001156:	69ad      	ldr	r5, [r5, #24]
 8001158:	f026 0803 	bic.w	r8, r6, #3
 800115c:	f045 0501 	orr.w	r5, r5, #1
 8001160:	61bd      	str	r5, [r7, #24]
 8001162:	69bd      	ldr	r5, [r7, #24]
 8001164:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001168:	f005 0501 	and.w	r5, r5, #1
 800116c:	9501      	str	r5, [sp, #4]
 800116e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001172:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001176:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001178:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800117c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001180:	fa09 f90b 	lsl.w	r9, r9, fp
 8001184:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001188:	4d3a      	ldr	r5, [pc, #232]	; (8001274 <HAL_GPIO_Init+0x1a8>)
 800118a:	42a8      	cmp	r0, r5
 800118c:	d068      	beq.n	8001260 <HAL_GPIO_Init+0x194>
 800118e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001192:	42a8      	cmp	r0, r5
 8001194:	d066      	beq.n	8001264 <HAL_GPIO_Init+0x198>
 8001196:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800119a:	42a8      	cmp	r0, r5
 800119c:	d064      	beq.n	8001268 <HAL_GPIO_Init+0x19c>
 800119e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011a2:	42a8      	cmp	r0, r5
 80011a4:	bf0c      	ite	eq
 80011a6:	2503      	moveq	r5, #3
 80011a8:	2504      	movne	r5, #4
 80011aa:	fa05 f50b 	lsl.w	r5, r5, fp
 80011ae:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80011b2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011b6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80011bc:	bf14      	ite	ne
 80011be:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011c0:	43a5      	biceq	r5, r4
 80011c2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011c4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80011ca:	bf14      	ite	ne
 80011cc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ce:	43a5      	biceq	r5, r4
 80011d0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d8:	bf14      	ite	ne
 80011da:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011dc:	43a5      	biceq	r5, r4
 80011de:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011e0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80011e6:	bf14      	ite	ne
 80011e8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ea:	ea25 0404 	biceq.w	r4, r5, r4
 80011ee:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011f0:	3601      	adds	r6, #1
 80011f2:	2e10      	cmp	r6, #16
 80011f4:	f47f af73 	bne.w	80010de <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80011f8:	b003      	add	sp, #12
 80011fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80011fe:	2d03      	cmp	r5, #3
 8001200:	d022      	beq.n	8001248 <HAL_GPIO_Init+0x17c>
 8001202:	2d11      	cmp	r5, #17
 8001204:	d184      	bne.n	8001110 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001206:	68ca      	ldr	r2, [r1, #12]
 8001208:	3204      	adds	r2, #4
          break;
 800120a:	e781      	b.n	8001110 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800120c:	4f1a      	ldr	r7, [pc, #104]	; (8001278 <HAL_GPIO_Init+0x1ac>)
 800120e:	42bd      	cmp	r5, r7
 8001210:	d009      	beq.n	8001226 <HAL_GPIO_Init+0x15a>
 8001212:	d812      	bhi.n	800123a <HAL_GPIO_Init+0x16e>
 8001214:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001284 <HAL_GPIO_Init+0x1b8>
 8001218:	454d      	cmp	r5, r9
 800121a:	d004      	beq.n	8001226 <HAL_GPIO_Init+0x15a>
 800121c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001220:	454d      	cmp	r5, r9
 8001222:	f47f af75 	bne.w	8001110 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001226:	688a      	ldr	r2, [r1, #8]
 8001228:	b1c2      	cbz	r2, 800125c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800122a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800122c:	bf0c      	ite	eq
 800122e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001232:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001236:	2208      	movs	r2, #8
 8001238:	e76a      	b.n	8001110 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800123a:	4575      	cmp	r5, lr
 800123c:	d0f3      	beq.n	8001226 <HAL_GPIO_Init+0x15a>
 800123e:	4565      	cmp	r5, ip
 8001240:	d0f1      	beq.n	8001226 <HAL_GPIO_Init+0x15a>
 8001242:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001288 <HAL_GPIO_Init+0x1bc>
 8001246:	e7eb      	b.n	8001220 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001248:	2200      	movs	r2, #0
 800124a:	e761      	b.n	8001110 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800124c:	68ca      	ldr	r2, [r1, #12]
          break;
 800124e:	e75f      	b.n	8001110 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001250:	68ca      	ldr	r2, [r1, #12]
 8001252:	3208      	adds	r2, #8
          break;
 8001254:	e75c      	b.n	8001110 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001256:	68ca      	ldr	r2, [r1, #12]
 8001258:	320c      	adds	r2, #12
          break;
 800125a:	e759      	b.n	8001110 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800125c:	2204      	movs	r2, #4
 800125e:	e757      	b.n	8001110 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001260:	2500      	movs	r5, #0
 8001262:	e7a2      	b.n	80011aa <HAL_GPIO_Init+0xde>
 8001264:	2501      	movs	r5, #1
 8001266:	e7a0      	b.n	80011aa <HAL_GPIO_Init+0xde>
 8001268:	2502      	movs	r5, #2
 800126a:	e79e      	b.n	80011aa <HAL_GPIO_Init+0xde>
 800126c:	40010400 	.word	0x40010400
 8001270:	40021000 	.word	0x40021000
 8001274:	40010800 	.word	0x40010800
 8001278:	10210000 	.word	0x10210000
 800127c:	10310000 	.word	0x10310000
 8001280:	10320000 	.word	0x10320000
 8001284:	10110000 	.word	0x10110000
 8001288:	10220000 	.word	0x10220000

0800128c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128c:	b10a      	cbz	r2, 8001292 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128e:	6101      	str	r1, [r0, #16]
 8001290:	4770      	bx	lr
 8001292:	0409      	lsls	r1, r1, #16
 8001294:	e7fb      	b.n	800128e <HAL_GPIO_WritePin+0x2>

08001296 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001296:	6802      	ldr	r2, [r0, #0]
 8001298:	6953      	ldr	r3, [r2, #20]
 800129a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800129e:	d00d      	beq.n	80012bc <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012a0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80012a4:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012a6:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80012a8:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012aa:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80012b4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80012b8:	2001      	movs	r0, #1
 80012ba:	4770      	bx	lr
  }
  return HAL_OK;
 80012bc:	4618      	mov	r0, r3
}
 80012be:	4770      	bx	lr

080012c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80012c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012c4:	4604      	mov	r4, r0
 80012c6:	4617      	mov	r7, r2
 80012c8:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012ca:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80012ce:	b28e      	uxth	r6, r1
 80012d0:	6825      	ldr	r5, [r4, #0]
 80012d2:	f1b8 0f01 	cmp.w	r8, #1
 80012d6:	bf0c      	ite	eq
 80012d8:	696b      	ldreq	r3, [r5, #20]
 80012da:	69ab      	ldrne	r3, [r5, #24]
 80012dc:	ea36 0303 	bics.w	r3, r6, r3
 80012e0:	bf14      	ite	ne
 80012e2:	2001      	movne	r0, #1
 80012e4:	2000      	moveq	r0, #0
 80012e6:	b908      	cbnz	r0, 80012ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80012e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012ec:	696b      	ldr	r3, [r5, #20]
 80012ee:	055a      	lsls	r2, r3, #21
 80012f0:	d512      	bpl.n	8001318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012f2:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80012f4:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fa:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012fc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001300:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001302:	2304      	movs	r3, #4
 8001304:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001306:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001308:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800130a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800130c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001310:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001318:	1c7b      	adds	r3, r7, #1
 800131a:	d0d9      	beq.n	80012d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800131c:	b94f      	cbnz	r7, 8001332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800131e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001320:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001322:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001324:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001328:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800132c:	2003      	movs	r0, #3
 800132e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001332:	f7ff f941 	bl	80005b8 <HAL_GetTick>
 8001336:	eba0 0009 	sub.w	r0, r0, r9
 800133a:	4287      	cmp	r7, r0
 800133c:	d2c8      	bcs.n	80012d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800133e:	e7ee      	b.n	800131e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001340 <I2C_WaitOnFlagUntilTimeout>:
{
 8001340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001344:	4604      	mov	r4, r0
 8001346:	4690      	mov	r8, r2
 8001348:	461f      	mov	r7, r3
 800134a:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800134c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001350:	b28d      	uxth	r5, r1
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	f1b9 0f01 	cmp.w	r9, #1
 8001358:	bf0c      	ite	eq
 800135a:	695b      	ldreq	r3, [r3, #20]
 800135c:	699b      	ldrne	r3, [r3, #24]
 800135e:	ea35 0303 	bics.w	r3, r5, r3
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	4543      	cmp	r3, r8
 800136a:	d002      	beq.n	8001372 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800136c:	2000      	movs	r0, #0
}
 800136e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001372:	1c7b      	adds	r3, r7, #1
 8001374:	d0ed      	beq.n	8001352 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001376:	b95f      	cbnz	r7, 8001390 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001378:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800137a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800137c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800137e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001382:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001386:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800138c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001390:	f7ff f912 	bl	80005b8 <HAL_GetTick>
 8001394:	1b80      	subs	r0, r0, r6
 8001396:	4287      	cmp	r7, r0
 8001398:	d2db      	bcs.n	8001352 <I2C_WaitOnFlagUntilTimeout+0x12>
 800139a:	e7ed      	b.n	8001378 <I2C_WaitOnFlagUntilTimeout+0x38>

0800139c <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	4604      	mov	r4, r0
 80013a0:	460d      	mov	r5, r1
 80013a2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	061b      	lsls	r3, r3, #24
 80013aa:	d501      	bpl.n	80013b0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80013ac:	2000      	movs	r0, #0
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013b0:	4620      	mov	r0, r4
 80013b2:	f7ff ff70 	bl	8001296 <I2C_IsAcknowledgeFailed>
 80013b6:	b9a8      	cbnz	r0, 80013e4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80013b8:	1c6a      	adds	r2, r5, #1
 80013ba:	d0f3      	beq.n	80013a4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013bc:	b965      	cbnz	r5, 80013d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013be:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80013c0:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013c2:	f043 0320 	orr.w	r3, r3, #32
 80013c6:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80013c8:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80013ca:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80013cc:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80013ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80013d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013d8:	f7ff f8ee 	bl	80005b8 <HAL_GetTick>
 80013dc:	1b80      	subs	r0, r0, r6
 80013de:	4285      	cmp	r5, r0
 80013e0:	d2e0      	bcs.n	80013a4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80013e2:	e7ec      	b.n	80013be <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
}
 80013e6:	bd70      	pop	{r4, r5, r6, pc}

080013e8 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	4604      	mov	r4, r0
 80013ec:	460d      	mov	r5, r1
 80013ee:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	075b      	lsls	r3, r3, #29
 80013f6:	d501      	bpl.n	80013fc <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80013f8:	2000      	movs	r0, #0
 80013fa:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff ff4a 	bl	8001296 <I2C_IsAcknowledgeFailed>
 8001402:	b9a8      	cbnz	r0, 8001430 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001404:	1c6a      	adds	r2, r5, #1
 8001406:	d0f3      	beq.n	80013f0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001408:	b965      	cbnz	r5, 8001424 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800140a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800140c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800140e:	f043 0320 	orr.w	r3, r3, #32
 8001412:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001414:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001416:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001418:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800141a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800141e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001422:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001424:	f7ff f8c8 	bl	80005b8 <HAL_GetTick>
 8001428:	1b80      	subs	r0, r0, r6
 800142a:	4285      	cmp	r5, r0
 800142c:	d2e0      	bcs.n	80013f0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800142e:	e7ec      	b.n	800140a <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001430:	2001      	movs	r0, #1
}
 8001432:	bd70      	pop	{r4, r5, r6, pc}

08001434 <HAL_I2C_Init>:
{
 8001434:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8001436:	4604      	mov	r4, r0
 8001438:	b908      	cbnz	r0, 800143e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800143a:	2001      	movs	r0, #1
 800143c:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800143e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001442:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001446:	b91b      	cbnz	r3, 8001450 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001448:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800144c:	f001 fc08 	bl	8002c60 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001450:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001452:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001454:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001458:	6813      	ldr	r3, [r2, #0]
 800145a:	f023 0301 	bic.w	r3, r3, #1
 800145e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001460:	f000 fce6 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001464:	6863      	ldr	r3, [r4, #4]
 8001466:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <HAL_I2C_Init+0xf0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d830      	bhi.n	80014ce <HAL_I2C_Init+0x9a>
 800146c:	4a2e      	ldr	r2, [pc, #184]	; (8001528 <HAL_I2C_Init+0xf4>)
 800146e:	4290      	cmp	r0, r2
 8001470:	d9e3      	bls.n	800143a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001472:	4a2e      	ldr	r2, [pc, #184]	; (800152c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8001474:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001476:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800147a:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800147c:	3201      	adds	r2, #1
 800147e:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001480:	4a28      	ldr	r2, [pc, #160]	; (8001524 <HAL_I2C_Init+0xf0>)
 8001482:	3801      	subs	r0, #1
 8001484:	4293      	cmp	r3, r2
 8001486:	d832      	bhi.n	80014ee <HAL_I2C_Init+0xba>
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fbb0 f0f3 	udiv	r0, r0, r3
 800148e:	1c43      	adds	r3, r0, #1
 8001490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001494:	2b04      	cmp	r3, #4
 8001496:	bf38      	it	cc
 8001498:	2304      	movcc	r3, #4
 800149a:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800149c:	6a22      	ldr	r2, [r4, #32]
 800149e:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a0:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80014a6:	68e2      	ldr	r2, [r4, #12]
 80014a8:	6923      	ldr	r3, [r4, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80014ae:	69a2      	ldr	r2, [r4, #24]
 80014b0:	6963      	ldr	r3, [r4, #20]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80014b6:	680b      	ldr	r3, [r1, #0]
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80014be:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_I2C_Init+0xfc>)
 80014d0:	4290      	cmp	r0, r2
 80014d2:	d9b2      	bls.n	800143a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80014d4:	4d15      	ldr	r5, [pc, #84]	; (800152c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80014da:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80014de:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014e0:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80014e2:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80014e4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80014e8:	fbb2 f2f5 	udiv	r2, r2, r5
 80014ec:	e7c6      	b.n	800147c <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80014ee:	68a2      	ldr	r2, [r4, #8]
 80014f0:	b952      	cbnz	r2, 8001508 <HAL_I2C_Init+0xd4>
 80014f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80014fa:	1c43      	adds	r3, r0, #1
 80014fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001500:	b16b      	cbz	r3, 800151e <HAL_I2C_Init+0xea>
 8001502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001506:	e7c8      	b.n	800149a <HAL_I2C_Init+0x66>
 8001508:	2219      	movs	r2, #25
 800150a:	4353      	muls	r3, r2
 800150c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001510:	1c43      	adds	r3, r0, #1
 8001512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001516:	b113      	cbz	r3, 800151e <HAL_I2C_Init+0xea>
 8001518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800151c:	e7bd      	b.n	800149a <HAL_I2C_Init+0x66>
 800151e:	2301      	movs	r3, #1
 8001520:	e7bb      	b.n	800149a <HAL_I2C_Init+0x66>
 8001522:	bf00      	nop
 8001524:	000186a0 	.word	0x000186a0
 8001528:	001e847f 	.word	0x001e847f
 800152c:	000f4240 	.word	0x000f4240
 8001530:	003d08ff 	.word	0x003d08ff

08001534 <HAL_I2C_Master_Transmit>:
{
 8001534:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001538:	4604      	mov	r4, r0
 800153a:	461f      	mov	r7, r3
 800153c:	460d      	mov	r5, r1
 800153e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001540:	f7ff f83a 	bl	80005b8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001544:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001548:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800154a:	2b20      	cmp	r3, #32
 800154c:	d004      	beq.n	8001558 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800154e:	2502      	movs	r5, #2
}
 8001550:	4628      	mov	r0, r5
 8001552:	b004      	add	sp, #16
 8001554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001558:	9000      	str	r0, [sp, #0]
 800155a:	2319      	movs	r3, #25
 800155c:	2201      	movs	r2, #1
 800155e:	495d      	ldr	r1, [pc, #372]	; (80016d4 <HAL_I2C_Master_Transmit+0x1a0>)
 8001560:	4620      	mov	r0, r4
 8001562:	f7ff feed 	bl	8001340 <I2C_WaitOnFlagUntilTimeout>
 8001566:	2800      	cmp	r0, #0
 8001568:	d1f1      	bne.n	800154e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800156a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800156e:	2b01      	cmp	r3, #1
 8001570:	d0ed      	beq.n	800154e <HAL_I2C_Master_Transmit+0x1a>
 8001572:	2301      	movs	r3, #1
 8001574:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800157e:	bf5e      	ittt	pl
 8001580:	681a      	ldrpl	r2, [r3, #0]
 8001582:	f042 0201 	orrpl.w	r2, r2, #1
 8001586:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800158e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001590:	2221      	movs	r2, #33	; 0x21
 8001592:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001596:	2210      	movs	r2, #16
 8001598:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159c:	2200      	movs	r2, #0
 800159e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015a0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80015a4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015a6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80015a8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80015aa:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80015ae:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015b2:	2a04      	cmp	r2, #4
 80015b4:	d004      	beq.n	80015c0 <HAL_I2C_Master_Transmit+0x8c>
 80015b6:	2a01      	cmp	r2, #1
 80015b8:	d002      	beq.n	80015c0 <HAL_I2C_Master_Transmit+0x8c>
 80015ba:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80015be:	d104      	bne.n	80015ca <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e002      	b.n	80015d0 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015cc:	2a12      	cmp	r2, #18
 80015ce:	d0f7      	beq.n	80015c0 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015d0:	9600      	str	r6, [sp, #0]
 80015d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015d4:	2200      	movs	r2, #0
 80015d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff feb0 	bl	8001340 <I2C_WaitOnFlagUntilTimeout>
 80015e0:	bb28      	cbnz	r0, 800162e <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e2:	6923      	ldr	r3, [r4, #16]
 80015e4:	6822      	ldr	r2, [r4, #0]
 80015e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015ea:	d112      	bne.n	8001612 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015ec:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80015f0:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015f2:	4633      	mov	r3, r6
 80015f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80015f6:	4938      	ldr	r1, [pc, #224]	; (80016d8 <HAL_I2C_Master_Transmit+0x1a4>)
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff fe61 	bl	80012c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015fe:	4605      	mov	r5, r0
 8001600:	b9a0      	cbnz	r0, 800162c <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	9003      	str	r0, [sp, #12]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	9203      	str	r2, [sp, #12]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	9303      	str	r3, [sp, #12]
 800160e:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001610:	e050      	b.n	80016b4 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001612:	11eb      	asrs	r3, r5, #7
 8001614:	f003 0306 	and.w	r3, r3, #6
 8001618:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800161c:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800161e:	492f      	ldr	r1, [pc, #188]	; (80016dc <HAL_I2C_Master_Transmit+0x1a8>)
 8001620:	4633      	mov	r3, r6
 8001622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001624:	4620      	mov	r0, r4
 8001626:	f7ff fe4b 	bl	80012c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800162a:	b148      	cbz	r0, 8001640 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800162c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800162e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001630:	2b04      	cmp	r3, #4
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	d107      	bne.n	8001648 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001638:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800163c:	2501      	movs	r5, #1
 800163e:	e787      	b.n	8001550 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	b2ed      	uxtb	r5, r5
 8001644:	611d      	str	r5, [r3, #16]
 8001646:	e7d4      	b.n	80015f2 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001648:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 800164c:	2503      	movs	r5, #3
 800164e:	e77f      	b.n	8001550 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001650:	4632      	mov	r2, r6
 8001652:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fea1 	bl	800139c <I2C_WaitOnTXEFlagUntilTimeout>
 800165a:	b140      	cbz	r0, 800166e <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800165e:	2b04      	cmp	r3, #4
 8001660:	d1f4      	bne.n	800164c <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001662:	6822      	ldr	r2, [r4, #0]
 8001664:	6813      	ldr	r3, [r2, #0]
 8001666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e7e6      	b.n	800163c <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800166e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001670:	6820      	ldr	r0, [r4, #0]
 8001672:	1c4b      	adds	r3, r1, #1
 8001674:	6263      	str	r3, [r4, #36]	; 0x24
 8001676:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001678:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800167a:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 800167c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800167e:	3b01      	subs	r3, #1
 8001680:	b29b      	uxth	r3, r3
 8001682:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001684:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001686:	1e53      	subs	r3, r2, #1
 8001688:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800168a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 800168c:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800168e:	d50a      	bpl.n	80016a6 <HAL_I2C_Master_Transmit+0x172>
 8001690:	b14b      	cbz	r3, 80016a6 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001692:	1c8b      	adds	r3, r1, #2
 8001694:	6263      	str	r3, [r4, #36]	; 0x24
 8001696:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001698:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800169a:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 800169c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800169e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80016a0:	3b01      	subs	r3, #1
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a6:	4632      	mov	r2, r6
 80016a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80016aa:	4620      	mov	r0, r4
 80016ac:	f7ff fe9c 	bl	80013e8 <I2C_WaitOnBTFFlagUntilTimeout>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d1d3      	bne.n	800165c <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80016b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ca      	bne.n	8001650 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016ba:	6821      	ldr	r1, [r4, #0]
 80016bc:	680a      	ldr	r2, [r1, #0]
 80016be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016c4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80016c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80016ca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80016d2:	e73d      	b.n	8001550 <HAL_I2C_Master_Transmit+0x1c>
 80016d4:	00100002 	.word	0x00100002
 80016d8:	00010002 	.word	0x00010002
 80016dc:	00010008 	.word	0x00010008

080016e0 <HAL_I2C_IsDeviceReady>:
{
 80016e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e4:	4604      	mov	r4, r0
 80016e6:	b085      	sub	sp, #20
 80016e8:	4698      	mov	r8, r3
 80016ea:	4689      	mov	r9, r1
 80016ec:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 80016ee:	f7fe ff63 	bl	80005b8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80016f2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80016f6:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d003      	beq.n	8001704 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80016fc:	2002      	movs	r0, #2
}
 80016fe:	b005      	add	sp, #20
 8001700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001704:	9000      	str	r0, [sp, #0]
 8001706:	2319      	movs	r3, #25
 8001708:	2201      	movs	r2, #1
 800170a:	494b      	ldr	r1, [pc, #300]	; (8001838 <HAL_I2C_IsDeviceReady+0x158>)
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff fe17 	bl	8001340 <I2C_WaitOnFlagUntilTimeout>
 8001712:	2800      	cmp	r0, #0
 8001714:	d1f2      	bne.n	80016fc <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001716:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800171a:	2b01      	cmp	r3, #1
 800171c:	d0ee      	beq.n	80016fc <HAL_I2C_IsDeviceReady+0x1c>
 800171e:	2301      	movs	r3, #1
 8001720:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001724:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001726:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001728:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800172a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8001838 <HAL_I2C_IsDeviceReady+0x158>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800172e:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001730:	bf58      	it	pl
 8001732:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001734:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8001738:	bf5c      	itt	pl
 800173a:	f042 0201 	orrpl.w	r2, r2, #1
 800173e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001746:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001748:	2324      	movs	r3, #36	; 0x24
 800174a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800174e:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001750:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001752:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001754:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001756:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800175a:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800175c:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001764:	9600      	str	r6, [sp, #0]
 8001766:	4643      	mov	r3, r8
 8001768:	2200      	movs	r2, #0
 800176a:	f7ff fde9 	bl	8001340 <I2C_WaitOnFlagUntilTimeout>
 800176e:	b108      	cbz	r0, 8001774 <HAL_I2C_IsDeviceReady+0x94>
        return HAL_TIMEOUT;
 8001770:	2003      	movs	r0, #3
 8001772:	e7c4      	b.n	80016fe <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001774:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001776:	27a0      	movs	r7, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001778:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 800177c:	f7fe ff1c 	bl	80005b8 <HAL_GetTick>
 8001780:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001786:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8001788:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800178c:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001790:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8001794:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001796:	b911      	cbnz	r1, 800179e <HAL_I2C_IsDeviceReady+0xbe>
 8001798:	b90a      	cbnz	r2, 800179e <HAL_I2C_IsDeviceReady+0xbe>
 800179a:	2ba0      	cmp	r3, #160	; 0xa0
 800179c:	d120      	bne.n	80017e0 <HAL_I2C_IsDeviceReady+0x100>
      hi2c->State = HAL_I2C_STATE_READY;
 800179e:	2720      	movs	r7, #32
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80017a0:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80017a2:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b2:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80017b4:	d02a      	beq.n	800180c <HAL_I2C_IsDeviceReady+0x12c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017b6:	2200      	movs	r2, #0
 80017b8:	9203      	str	r2, [sp, #12]
 80017ba:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017bc:	491e      	ldr	r1, [pc, #120]	; (8001838 <HAL_I2C_IsDeviceReady+0x158>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017be:	9203      	str	r2, [sp, #12]
 80017c0:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017c2:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c4:	9303      	str	r3, [sp, #12]
 80017c6:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017c8:	9600      	str	r6, [sp, #0]
 80017ca:	2319      	movs	r3, #25
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff fdb7 	bl	8001340 <I2C_WaitOnFlagUntilTimeout>
 80017d2:	2800      	cmp	r0, #0
 80017d4:	d1cc      	bne.n	8001770 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->State = HAL_I2C_STATE_READY;
 80017d6:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80017da:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80017de:	e78e      	b.n	80016fe <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80017e0:	f1b8 0f00 	cmp.w	r8, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_I2C_IsDeviceReady+0x120>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80017e6:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017ee:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 80017f0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017f4:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017f8:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	e7ca      	b.n	8001796 <HAL_I2C_IsDeviceReady+0xb6>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001800:	f7fe feda 	bl	80005b8 <HAL_GetTick>
 8001804:	1b80      	subs	r0, r0, r6
 8001806:	4580      	cmp	r8, r0
 8001808:	d3ed      	bcc.n	80017e6 <HAL_I2C_IsDeviceReady+0x106>
 800180a:	e7ee      	b.n	80017ea <HAL_I2C_IsDeviceReady+0x10a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800180c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001810:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001812:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001814:	4620      	mov	r0, r4
 8001816:	9600      	str	r6, [sp, #0]
 8001818:	2319      	movs	r3, #25
 800181a:	2201      	movs	r2, #1
 800181c:	f7ff fd90 	bl	8001340 <I2C_WaitOnFlagUntilTimeout>
 8001820:	2800      	cmp	r0, #0
 8001822:	d1a5      	bne.n	8001770 <HAL_I2C_IsDeviceReady+0x90>
 8001824:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8001826:	45aa      	cmp	sl, r5
 8001828:	d894      	bhi.n	8001754 <HAL_I2C_IsDeviceReady+0x74>
    __HAL_UNLOCK(hi2c);
 800182a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800182e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8001832:	2001      	movs	r0, #1
 8001834:	e763      	b.n	80016fe <HAL_I2C_IsDeviceReady+0x1e>
 8001836:	bf00      	nop
 8001838:	00100002 	.word	0x00100002
 800183c:	ffff0000 	.word	0xffff0000

08001840 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001840:	6803      	ldr	r3, [r0, #0]
{
 8001842:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	07db      	lsls	r3, r3, #31
{
 8001848:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184a:	d414      	bmi.n	8001876 <HAL_RCC_OscConfig+0x36>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	079f      	lsls	r7, r3, #30
 8001850:	d462      	bmi.n	8001918 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001852:	682b      	ldr	r3, [r5, #0]
 8001854:	0719      	lsls	r1, r3, #28
 8001856:	f100 8099 	bmi.w	800198c <HAL_RCC_OscConfig+0x14c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185a:	682b      	ldr	r3, [r5, #0]
 800185c:	075a      	lsls	r2, r3, #29
 800185e:	f100 80c3 	bmi.w	80019e8 <HAL_RCC_OscConfig+0x1a8>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001862:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001864:	2a00      	cmp	r2, #0
 8001866:	f040 8131 	bne.w	8001acc <HAL_RCC_OscConfig+0x28c>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186a:	6a2a      	ldr	r2, [r5, #32]
 800186c:	2a00      	cmp	r2, #0
 800186e:	f040 8184 	bne.w	8001b7a <HAL_RCC_OscConfig+0x33a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001872:	2000      	movs	r0, #0
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x60>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001876:	4c90      	ldr	r4, [pc, #576]	; (8001ab8 <HAL_RCC_OscConfig+0x278>)
 8001878:	6863      	ldr	r3, [r4, #4]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b04      	cmp	r3, #4
 8001880:	d007      	beq.n	8001892 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001882:	6863      	ldr	r3, [r4, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b08      	cmp	r3, #8
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x66>
 800188c:	6863      	ldr	r3, [r4, #4]
 800188e:	03de      	lsls	r6, r3, #15
 8001890:	d509      	bpl.n	80018a6 <HAL_RCC_OscConfig+0x66>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	039c      	lsls	r4, r3, #14
 8001896:	d5d9      	bpl.n	800184c <HAL_RCC_OscConfig+0xc>
 8001898:	68ab      	ldr	r3, [r5, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1d6      	bne.n	800184c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800189e:	2001      	movs	r0, #1
}
 80018a0:	b002      	add	sp, #8
 80018a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a6:	68ab      	ldr	r3, [r5, #8]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d110      	bne.n	80018d0 <HAL_RCC_OscConfig+0x90>
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018b6:	f7fe fe7f 	bl	80005b8 <HAL_GetTick>
 80018ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	0398      	lsls	r0, r3, #14
 80018c0:	d4c4      	bmi.n	800184c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c2:	f7fe fe79 	bl	80005b8 <HAL_GetTick>
 80018c6:	1b80      	subs	r0, r0, r6
 80018c8:	2864      	cmp	r0, #100	; 0x64
 80018ca:	d9f7      	bls.n	80018bc <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 80018cc:	2003      	movs	r0, #3
 80018ce:	e7e7      	b.n	80018a0 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d0:	b99b      	cbnz	r3, 80018fa <HAL_RCC_OscConfig+0xba>
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d8:	6023      	str	r3, [r4, #0]
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018e2:	f7fe fe69 	bl	80005b8 <HAL_GetTick>
 80018e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	0399      	lsls	r1, r3, #14
 80018ec:	d5ae      	bpl.n	800184c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ee:	f7fe fe63 	bl	80005b8 <HAL_GetTick>
 80018f2:	1b80      	subs	r0, r0, r6
 80018f4:	2864      	cmp	r0, #100	; 0x64
 80018f6:	d9f7      	bls.n	80018e8 <HAL_RCC_OscConfig+0xa8>
 80018f8:	e7e8      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	d103      	bne.n	800190a <HAL_RCC_OscConfig+0xca>
 8001902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001906:	6023      	str	r3, [r4, #0]
 8001908:	e7d1      	b.n	80018ae <HAL_RCC_OscConfig+0x6e>
 800190a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190e:	6023      	str	r3, [r4, #0]
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001916:	e7cd      	b.n	80018b4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001918:	4c67      	ldr	r4, [pc, #412]	; (8001ab8 <HAL_RCC_OscConfig+0x278>)
 800191a:	6863      	ldr	r3, [r4, #4]
 800191c:	f013 0f0c 	tst.w	r3, #12
 8001920:	d007      	beq.n	8001932 <HAL_RCC_OscConfig+0xf2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d110      	bne.n	800194e <HAL_RCC_OscConfig+0x10e>
 800192c:	6863      	ldr	r3, [r4, #4]
 800192e:	03da      	lsls	r2, r3, #15
 8001930:	d40d      	bmi.n	800194e <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	079b      	lsls	r3, r3, #30
 8001936:	d502      	bpl.n	800193e <HAL_RCC_OscConfig+0xfe>
 8001938:	696b      	ldr	r3, [r5, #20]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d1af      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	69aa      	ldr	r2, [r5, #24]
 8001942:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001946:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800194a:	6023      	str	r3, [r4, #0]
 800194c:	e781      	b.n	8001852 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800194e:	696a      	ldr	r2, [r5, #20]
 8001950:	4b5a      	ldr	r3, [pc, #360]	; (8001abc <HAL_RCC_OscConfig+0x27c>)
 8001952:	b16a      	cbz	r2, 8001970 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_HSI_ENABLE();
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001958:	f7fe fe2e 	bl	80005b8 <HAL_GetTick>
 800195c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	079f      	lsls	r7, r3, #30
 8001962:	d4ec      	bmi.n	800193e <HAL_RCC_OscConfig+0xfe>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001964:	f7fe fe28 	bl	80005b8 <HAL_GetTick>
 8001968:	1b80      	subs	r0, r0, r6
 800196a:	2802      	cmp	r0, #2
 800196c:	d9f7      	bls.n	800195e <HAL_RCC_OscConfig+0x11e>
 800196e:	e7ad      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8001970:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001972:	f7fe fe21 	bl	80005b8 <HAL_GetTick>
 8001976:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	0798      	lsls	r0, r3, #30
 800197c:	f57f af69 	bpl.w	8001852 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001980:	f7fe fe1a 	bl	80005b8 <HAL_GetTick>
 8001984:	1b80      	subs	r0, r0, r6
 8001986:	2802      	cmp	r0, #2
 8001988:	d9f6      	bls.n	8001978 <HAL_RCC_OscConfig+0x138>
 800198a:	e79f      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198c:	69ea      	ldr	r2, [r5, #28]
 800198e:	4c4a      	ldr	r4, [pc, #296]	; (8001ab8 <HAL_RCC_OscConfig+0x278>)
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_OscConfig+0x280>)
 8001992:	b1da      	cbz	r2, 80019cc <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_LSI_ENABLE();
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001998:	f7fe fe0e 	bl	80005b8 <HAL_GetTick>
 800199c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019a0:	079b      	lsls	r3, r3, #30
 80019a2:	d50d      	bpl.n	80019c0 <HAL_RCC_OscConfig+0x180>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80019a8:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <HAL_RCC_OscConfig+0x284>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80019b0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80019b2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80019b4:	9b01      	ldr	r3, [sp, #4]
 80019b6:	1e5a      	subs	r2, r3, #1
 80019b8:	9201      	str	r2, [sp, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f9      	bne.n	80019b2 <HAL_RCC_OscConfig+0x172>
 80019be:	e74c      	b.n	800185a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c0:	f7fe fdfa 	bl	80005b8 <HAL_GetTick>
 80019c4:	1b80      	subs	r0, r0, r6
 80019c6:	2802      	cmp	r0, #2
 80019c8:	d9e9      	bls.n	800199e <HAL_RCC_OscConfig+0x15e>
 80019ca:	e77f      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 80019cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019ce:	f7fe fdf3 	bl	80005b8 <HAL_GetTick>
 80019d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019d6:	079f      	lsls	r7, r3, #30
 80019d8:	f57f af3f 	bpl.w	800185a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019dc:	f7fe fdec 	bl	80005b8 <HAL_GetTick>
 80019e0:	1b80      	subs	r0, r0, r6
 80019e2:	2802      	cmp	r0, #2
 80019e4:	d9f6      	bls.n	80019d4 <HAL_RCC_OscConfig+0x194>
 80019e6:	e771      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e8:	4c33      	ldr	r4, [pc, #204]	; (8001ab8 <HAL_RCC_OscConfig+0x278>)
 80019ea:	69e3      	ldr	r3, [r4, #28]
 80019ec:	00de      	lsls	r6, r3, #3
 80019ee:	d424      	bmi.n	8001a3a <HAL_RCC_OscConfig+0x1fa>
      pwrclkchanged = SET;
 80019f0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	69e3      	ldr	r3, [r4, #28]
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	61e3      	str	r3, [r4, #28]
 80019fa:	69e3      	ldr	r3, [r4, #28]
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	4e30      	ldr	r6, [pc, #192]	; (8001ac8 <HAL_RCC_OscConfig+0x288>)
 8001a06:	6833      	ldr	r3, [r6, #0]
 8001a08:	05d8      	lsls	r0, r3, #23
 8001a0a:	d518      	bpl.n	8001a3e <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	692b      	ldr	r3, [r5, #16]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d126      	bne.n	8001a60 <HAL_RCC_OscConfig+0x220>
 8001a12:	6a23      	ldr	r3, [r4, #32]
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a1a:	f7fe fdcd 	bl	80005b8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a22:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	6a23      	ldr	r3, [r4, #32]
 8001a26:	079a      	lsls	r2, r3, #30
 8001a28:	d53f      	bpl.n	8001aaa <HAL_RCC_OscConfig+0x26a>
    if(pwrclkchanged == SET)
 8001a2a:	2f00      	cmp	r7, #0
 8001a2c:	f43f af19 	beq.w	8001862 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	69e3      	ldr	r3, [r4, #28]
 8001a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a36:	61e3      	str	r3, [r4, #28]
 8001a38:	e713      	b.n	8001862 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2700      	movs	r7, #0
 8001a3c:	e7e2      	b.n	8001a04 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	6833      	ldr	r3, [r6, #0]
 8001a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a44:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a46:	f7fe fdb7 	bl	80005b8 <HAL_GetTick>
 8001a4a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	6833      	ldr	r3, [r6, #0]
 8001a4e:	05d9      	lsls	r1, r3, #23
 8001a50:	d4dc      	bmi.n	8001a0c <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7fe fdb1 	bl	80005b8 <HAL_GetTick>
 8001a56:	eba0 0008 	sub.w	r0, r0, r8
 8001a5a:	2864      	cmp	r0, #100	; 0x64
 8001a5c:	d9f6      	bls.n	8001a4c <HAL_RCC_OscConfig+0x20c>
 8001a5e:	e735      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	b9ab      	cbnz	r3, 8001a8e <HAL_RCC_OscConfig+0x24e>
 8001a62:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	6223      	str	r3, [r4, #32]
 8001a6e:	6a23      	ldr	r3, [r4, #32]
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a76:	f7fe fd9f 	bl	80005b8 <HAL_GetTick>
 8001a7a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	6a23      	ldr	r3, [r4, #32]
 8001a7e:	079b      	lsls	r3, r3, #30
 8001a80:	d5d3      	bpl.n	8001a2a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7fe fd99 	bl	80005b8 <HAL_GetTick>
 8001a86:	1b80      	subs	r0, r0, r6
 8001a88:	4540      	cmp	r0, r8
 8001a8a:	d9f7      	bls.n	8001a7c <HAL_RCC_OscConfig+0x23c>
 8001a8c:	e71e      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	6a23      	ldr	r3, [r4, #32]
 8001a92:	d103      	bne.n	8001a9c <HAL_RCC_OscConfig+0x25c>
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6223      	str	r3, [r4, #32]
 8001a9a:	e7ba      	b.n	8001a12 <HAL_RCC_OscConfig+0x1d2>
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	6223      	str	r3, [r4, #32]
 8001aa2:	6a23      	ldr	r3, [r4, #32]
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	e7b6      	b.n	8001a18 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7fe fd85 	bl	80005b8 <HAL_GetTick>
 8001aae:	eba0 0008 	sub.w	r0, r0, r8
 8001ab2:	42b0      	cmp	r0, r6
 8001ab4:	d9b6      	bls.n	8001a24 <HAL_RCC_OscConfig+0x1e4>
 8001ab6:	e709      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	42420000 	.word	0x42420000
 8001ac0:	42420480 	.word	0x42420480
 8001ac4:	20000020 	.word	0x20000020
 8001ac8:	40007000 	.word	0x40007000
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001acc:	4c4f      	ldr	r4, [pc, #316]	; (8001c0c <HAL_RCC_OscConfig+0x3cc>)
 8001ace:	6863      	ldr	r3, [r4, #4]
 8001ad0:	03d8      	lsls	r0, r3, #15
 8001ad2:	d508      	bpl.n	8001ae6 <HAL_RCC_OscConfig+0x2a6>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001ad4:	6863      	ldr	r3, [r4, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d103      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2a6>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001ade:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001ae0:	03d9      	lsls	r1, r3, #15
 8001ae2:	f53f aedc 	bmi.w	800189e <HAL_RCC_OscConfig+0x5e>
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001ae6:	2a02      	cmp	r2, #2
 8001ae8:	d133      	bne.n	8001b52 <HAL_RCC_OscConfig+0x312>
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	00da      	lsls	r2, r3, #3
 8001aee:	d506      	bpl.n	8001afe <HAL_RCC_OscConfig+0x2be>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001af0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001af2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001af8:	4293      	cmp	r3, r2
 8001afa:	f47f aed0 	bne.w	800189e <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL2_DISABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	4e43      	ldr	r6, [pc, #268]	; (8001c10 <HAL_RCC_OscConfig+0x3d0>)
 8001b02:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b04:	f7fe fd58 	bl	80005b8 <HAL_GetTick>
 8001b08:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	d41a      	bmi.n	8001b46 <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001b10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b12:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001b1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b1e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001b20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b24:	4313      	orrs	r3, r2
 8001b26:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8001b28:	2301      	movs	r3, #1
 8001b2a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b2c:	f7fe fd44 	bl	80005b8 <HAL_GetTick>
 8001b30:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	011f      	lsls	r7, r3, #4
 8001b36:	f53f ae98 	bmi.w	800186a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001b3a:	f7fe fd3d 	bl	80005b8 <HAL_GetTick>
 8001b3e:	1b80      	subs	r0, r0, r6
 8001b40:	2864      	cmp	r0, #100	; 0x64
 8001b42:	d9f6      	bls.n	8001b32 <HAL_RCC_OscConfig+0x2f2>
 8001b44:	e6c2      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001b46:	f7fe fd37 	bl	80005b8 <HAL_GetTick>
 8001b4a:	1bc0      	subs	r0, r0, r7
 8001b4c:	2864      	cmp	r0, #100	; 0x64
 8001b4e:	d9dc      	bls.n	8001b0a <HAL_RCC_OscConfig+0x2ca>
 8001b50:	e6bc      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_PLL2_DISABLE();
 8001b52:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001b54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5a:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <HAL_RCC_OscConfig+0x3d0>)
 8001b5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b60:	f7fe fd2a 	bl	80005b8 <HAL_GetTick>
 8001b64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	0118      	lsls	r0, r3, #4
 8001b6a:	f57f ae7e 	bpl.w	800186a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001b6e:	f7fe fd23 	bl	80005b8 <HAL_GetTick>
 8001b72:	1b80      	subs	r0, r0, r6
 8001b74:	2864      	cmp	r0, #100	; 0x64
 8001b76:	d9f6      	bls.n	8001b66 <HAL_RCC_OscConfig+0x326>
 8001b78:	e6a8      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7a:	4c24      	ldr	r4, [pc, #144]	; (8001c0c <HAL_RCC_OscConfig+0x3cc>)
 8001b7c:	6863      	ldr	r3, [r4, #4]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	f43f ae8b 	beq.w	800189e <HAL_RCC_OscConfig+0x5e>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	4e22      	ldr	r6, [pc, #136]	; (8001c14 <HAL_RCC_OscConfig+0x3d4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b90:	d12f      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 8001b92:	f7fe fd11 	bl	80005b8 <HAL_GetTick>
 8001b96:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	0199      	lsls	r1, r3, #6
 8001b9c:	d423      	bmi.n	8001be6 <HAL_RCC_OscConfig+0x3a6>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_OscConfig+0x37a>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ba8:	6869      	ldr	r1, [r5, #4]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	62e2      	str	r2, [r4, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bb0:	68e9      	ldr	r1, [r5, #12]
 8001bb2:	f022 020f 	bic.w	r2, r2, #15
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bba:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001bbc:	6862      	ldr	r2, [r4, #4]
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	2301      	movs	r3, #1
 8001bca:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001bcc:	f7fe fcf4 	bl	80005b8 <HAL_GetTick>
 8001bd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	019a      	lsls	r2, r3, #6
 8001bd6:	f53f ae4c 	bmi.w	8001872 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bda:	f7fe fced 	bl	80005b8 <HAL_GetTick>
 8001bde:	1b40      	subs	r0, r0, r5
 8001be0:	2802      	cmp	r0, #2
 8001be2:	d9f6      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x392>
 8001be4:	e672      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe fce7 	bl	80005b8 <HAL_GetTick>
 8001bea:	1bc0      	subs	r0, r0, r7
 8001bec:	2802      	cmp	r0, #2
 8001bee:	d9d3      	bls.n	8001b98 <HAL_RCC_OscConfig+0x358>
 8001bf0:	e66c      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001bf2:	f7fe fce1 	bl	80005b8 <HAL_GetTick>
 8001bf6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	019b      	lsls	r3, r3, #6
 8001bfc:	f57f ae39 	bpl.w	8001872 <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c00:	f7fe fcda 	bl	80005b8 <HAL_GetTick>
 8001c04:	1b40      	subs	r0, r0, r5
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d9f6      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x3b8>
 8001c0a:	e65f      	b.n	80018cc <HAL_RCC_OscConfig+0x8c>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	42420068 	.word	0x42420068
 8001c14:	42420060 	.word	0x42420060

08001c18 <HAL_RCC_GetSysClockFreq>:
{
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001c1c:	466a      	mov	r2, sp
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c20:	f103 0508 	add.w	r5, r3, #8
 8001c24:	4614      	mov	r4, r2
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	c403      	stmia	r4!, {r0, r1}
 8001c2e:	42ab      	cmp	r3, r5
 8001c30:	4622      	mov	r2, r4
 8001c32:	d1f7      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xc>
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	889b      	ldrh	r3, [r3, #4]
 8001c38:	6020      	str	r0, [r4, #0]
 8001c3a:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c3e:	ac04      	add	r4, sp, #16
 8001c40:	f103 0510 	add.w	r5, r3, #16
 8001c44:	4622      	mov	r2, r4
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	6859      	ldr	r1, [r3, #4]
 8001c4a:	3308      	adds	r3, #8
 8001c4c:	c203      	stmia	r2!, {r0, r1}
 8001c4e:	42ab      	cmp	r3, r5
 8001c50:	4614      	mov	r4, r2
 8001c52:	d1f7      	bne.n	8001c44 <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 8001c54:	491e      	ldr	r1, [pc, #120]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c56:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001c58:	f003 020c 	and.w	r2, r3, #12
 8001c5c:	2a08      	cmp	r2, #8
 8001c5e:	d131      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c60:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001c64:	a808      	add	r0, sp, #32
 8001c66:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c68:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6a:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c6e:	d526      	bpl.n	8001cbe <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001c70:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4403      	add	r3, r0
 8001c78:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001c7c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001c7e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c84:	d016      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001c86:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001c88:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8001c8a:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8001c8e:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001c90:	fba4 4506 	umull	r4, r5, r4, r6
 8001c94:	fba4 0103 	umull	r0, r1, r4, r3
 8001c98:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001c9c:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8001ca0:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ca6:	f7fe fabd 	bl	8000224 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001caa:	2e0d      	cmp	r6, #13
 8001cac:	d100      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x98>
            pllclk = pllclk / 2;
 8001cae:	0840      	lsrs	r0, r0, #1
}
 8001cb0:	b009      	add	sp, #36	; 0x24
 8001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001cb4:	fb03 f006 	mul.w	r0, r3, r6
 8001cb8:	fbb0 f0f2 	udiv	r0, r0, r2
 8001cbc:	e7f5      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cc0:	4370      	muls	r0, r6
 8001cc2:	e7f5      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 8001cc4:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 8001cc6:	e7f3      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x98>
 8001cc8:	08003670 	.word	0x08003670
 8001ccc:	0800367e 	.word	0x0800367e
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	007a1200 	.word	0x007a1200
 8001cd8:	003d0900 	.word	0x003d0900

08001cdc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	; (8001e14 <HAL_RCC_ClockConfig+0x138>)
{
 8001cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ce2:	6813      	ldr	r3, [r2, #0]
{
 8001ce4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	428b      	cmp	r3, r1
{
 8001cec:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cee:	d328      	bcc.n	8001d42 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	682a      	ldr	r2, [r5, #0]
 8001cf2:	0791      	lsls	r1, r2, #30
 8001cf4:	d432      	bmi.n	8001d5c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	07d2      	lsls	r2, r2, #31
 8001cf8:	d438      	bmi.n	8001d6c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cfa:	4a46      	ldr	r2, [pc, #280]	; (8001e14 <HAL_RCC_ClockConfig+0x138>)
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	429e      	cmp	r6, r3
 8001d04:	d373      	bcc.n	8001dee <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d06:	682a      	ldr	r2, [r5, #0]
 8001d08:	4c43      	ldr	r4, [pc, #268]	; (8001e18 <HAL_RCC_ClockConfig+0x13c>)
 8001d0a:	f012 0f04 	tst.w	r2, #4
 8001d0e:	d179      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	0713      	lsls	r3, r2, #28
 8001d12:	d506      	bpl.n	8001d22 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d14:	6863      	ldr	r3, [r4, #4]
 8001d16:	692a      	ldr	r2, [r5, #16]
 8001d18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d20:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d22:	f7ff ff79 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001d26:	6863      	ldr	r3, [r4, #4]
 8001d28:	4a3c      	ldr	r2, [pc, #240]	; (8001e1c <HAL_RCC_ClockConfig+0x140>)
 8001d2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	40d8      	lsrs	r0, r3
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_RCC_ClockConfig+0x144>)
 8001d34:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7fe fbfc 	bl	8000534 <HAL_InitTick>
  return HAL_OK;
 8001d3c:	2000      	movs	r0, #0
}
 8001d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	6813      	ldr	r3, [r2, #0]
 8001d44:	f023 0307 	bic.w	r3, r3, #7
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d4c:	6813      	ldr	r3, [r2, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	4299      	cmp	r1, r3
 8001d54:	d0cc      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001d56:	2001      	movs	r0, #1
 8001d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	492e      	ldr	r1, [pc, #184]	; (8001e18 <HAL_RCC_ClockConfig+0x13c>)
 8001d5e:	68a8      	ldr	r0, [r5, #8]
 8001d60:	684b      	ldr	r3, [r1, #4]
 8001d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d66:	4303      	orrs	r3, r0
 8001d68:	604b      	str	r3, [r1, #4]
 8001d6a:	e7c4      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6c:	686a      	ldr	r2, [r5, #4]
 8001d6e:	4c2a      	ldr	r4, [pc, #168]	; (8001e18 <HAL_RCC_ClockConfig+0x13c>)
 8001d70:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	d0ec      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	4313      	orrs	r3, r2
 8001d88:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001d8a:	f7fe fc15 	bl	80005b8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001d90:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d114      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d96:	6863      	ldr	r3, [r4, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d0ac      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7fe fc0a 	bl	80005b8 <HAL_GetTick>
 8001da4:	1bc0      	subs	r0, r0, r7
 8001da6:	4540      	cmp	r0, r8
 8001da8:	d9f5      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001daa:	2003      	movs	r0, #3
 8001dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db0:	2a02      	cmp	r2, #2
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001db8:	e7df      	b.n	8001d7a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dba:	f013 0f02 	tst.w	r3, #2
 8001dbe:	e7dc      	b.n	8001d7a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d10f      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc4:	6863      	ldr	r3, [r4, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d095      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dce:	f7fe fbf3 	bl	80005b8 <HAL_GetTick>
 8001dd2:	1bc0      	subs	r0, r0, r7
 8001dd4:	4540      	cmp	r0, r8
 8001dd6:	d9f5      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0xe8>
 8001dd8:	e7e7      	b.n	8001daa <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dda:	f7fe fbed 	bl	80005b8 <HAL_GetTick>
 8001dde:	1bc0      	subs	r0, r0, r7
 8001de0:	4540      	cmp	r0, r8
 8001de2:	d8e2      	bhi.n	8001daa <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de4:	6863      	ldr	r3, [r4, #4]
 8001de6:	f013 0f0c 	tst.w	r3, #12
 8001dea:	d1f6      	bne.n	8001dda <HAL_RCC_ClockConfig+0xfe>
 8001dec:	e785      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	6813      	ldr	r3, [r2, #0]
 8001df0:	f023 0307 	bic.w	r3, r3, #7
 8001df4:	4333      	orrs	r3, r6
 8001df6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001df8:	6813      	ldr	r3, [r2, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	429e      	cmp	r6, r3
 8001e00:	d1a9      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x7a>
 8001e02:	e780      	b.n	8001d06 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	6863      	ldr	r3, [r4, #4]
 8001e06:	68e9      	ldr	r1, [r5, #12]
 8001e08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6063      	str	r3, [r4, #4]
 8001e10:	e77e      	b.n	8001d10 <HAL_RCC_ClockConfig+0x34>
 8001e12:	bf00      	nop
 8001e14:	40022000 	.word	0x40022000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	08005f19 	.word	0x08005f19
 8001e20:	20000020 	.word	0x20000020

08001e24 <HAL_RCC_GetHCLKFreq>:
}
 8001e24:	4b01      	ldr	r3, [pc, #4]	; (8001e2c <HAL_RCC_GetHCLKFreq+0x8>)
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000020 	.word	0x20000020

08001e30 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	4a03      	ldr	r2, [pc, #12]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e3e:	6810      	ldr	r0, [r2, #0]
}    
 8001e40:	40d8      	lsrs	r0, r3
 8001e42:	4770      	bx	lr
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08005f29 	.word	0x08005f29
 8001e4c:	20000020 	.word	0x20000020

08001e50 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e5a:	5cd3      	ldrb	r3, [r2, r3]
 8001e5c:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e5e:	6810      	ldr	r0, [r2, #0]
} 
 8001e60:	40d8      	lsrs	r0, r3
 8001e62:	4770      	bx	lr
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08005f29 	.word	0x08005f29
 8001e6c:	20000020 	.word	0x20000020

08001e70 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e70:	6803      	ldr	r3, [r0, #0]
{
 8001e72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e76:	f013 0f01 	tst.w	r3, #1
{
 8001e7a:	4605      	mov	r5, r0
 8001e7c:	4c57      	ldr	r4, [pc, #348]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e7e:	d01f      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e80:	69e3      	ldr	r3, [r4, #28]
 8001e82:	00da      	lsls	r2, r3, #3
 8001e84:	d447      	bmi.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001e86:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	69e3      	ldr	r3, [r4, #28]
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	61e3      	str	r3, [r4, #28]
 8001e90:	69e3      	ldr	r3, [r4, #28]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9a:	4e51      	ldr	r6, [pc, #324]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001e9c:	6833      	ldr	r3, [r6, #0]
 8001e9e:	05db      	lsls	r3, r3, #23
 8001ea0:	d53b      	bpl.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ea2:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ea4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ea8:	d14b      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001eaa:	6a23      	ldr	r3, [r4, #32]
 8001eac:	686a      	ldr	r2, [r5, #4]
 8001eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eb6:	b11f      	cbz	r7, 8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb8:	69e3      	ldr	r3, [r4, #28]
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ec0:	682a      	ldr	r2, [r5, #0]
 8001ec2:	0793      	lsls	r3, r2, #30
 8001ec4:	d505      	bpl.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ec6:	6863      	ldr	r3, [r4, #4]
 8001ec8:	68a9      	ldr	r1, [r5, #8]
 8001eca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001ed2:	0757      	lsls	r7, r2, #29
 8001ed4:	d505      	bpl.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001ed6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ed8:	68e9      	ldr	r1, [r5, #12]
 8001eda:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8001ee2:	0716      	lsls	r6, r2, #28
 8001ee4:	d505      	bpl.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8001ee6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ee8:	692a      	ldr	r2, [r5, #16]
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8001ef2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ef4:	0398      	lsls	r0, r3, #14
 8001ef6:	d466      	bmi.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8001ef8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001efa:	0359      	lsls	r1, r3, #13
 8001efc:	d463      	bmi.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001efe:	6828      	ldr	r0, [r5, #0]
 8001f00:	f010 0010 	ands.w	r0, r0, #16
 8001f04:	d01a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f06:	6863      	ldr	r3, [r4, #4]
 8001f08:	69ea      	ldr	r2, [r5, #28]
 8001f0a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f12:	2000      	movs	r0, #0
 8001f14:	e012      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 8001f16:	2700      	movs	r7, #0
 8001f18:	e7bf      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1a:	6833      	ldr	r3, [r6, #0]
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f22:	f7fe fb49 	bl	80005b8 <HAL_GetTick>
 8001f26:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	6833      	ldr	r3, [r6, #0]
 8001f2a:	05d8      	lsls	r0, r3, #23
 8001f2c:	d4b9      	bmi.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7fe fb43 	bl	80005b8 <HAL_GetTick>
 8001f32:	eba0 0008 	sub.w	r0, r0, r8
 8001f36:	2864      	cmp	r0, #100	; 0x64
 8001f38:	d9f6      	bls.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8001f3a:	2003      	movs	r0, #3
}
 8001f3c:	b002      	add	sp, #8
 8001f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f42:	686a      	ldr	r2, [r5, #4]
 8001f44:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d0ae      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	4a25      	ldr	r2, [pc, #148]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f50:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f52:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f54:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001f5c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f5e:	07d9      	lsls	r1, r3, #31
 8001f60:	d5a3      	bpl.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8001f62:	f7fe fb29 	bl	80005b8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6c:	6a23      	ldr	r3, [r4, #32]
 8001f6e:	079a      	lsls	r2, r3, #30
 8001f70:	d49b      	bmi.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7fe fb21 	bl	80005b8 <HAL_GetTick>
 8001f76:	1b80      	subs	r0, r0, r6
 8001f78:	4540      	cmp	r0, r8
 8001f7a:	d9f7      	bls.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001f7c:	e7dd      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	69a9      	ldr	r1, [r5, #24]
 8001f82:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001f86:	d004      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x122>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8001f88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f8a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8001f8e:	428a      	cmp	r2, r1
 8001f90:	d122      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8001f92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001f9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f9e:	696a      	ldr	r2, [r5, #20]
 8001fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fa4:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 8001fa6:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001fac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fae:	f7fe fb03 	bl	80005b8 <HAL_GetTick>
 8001fb2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	009a      	lsls	r2, r3, #2
 8001fb8:	d4a1      	bmi.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fba:	f7fe fafd 	bl	80005b8 <HAL_GetTick>
 8001fbe:	1b80      	subs	r0, r0, r6
 8001fc0:	2864      	cmp	r0, #100	; 0x64
 8001fc2:	d9f7      	bls.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8001fc4:	e7b9      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	d5d8      	bpl.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8001fcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fce:	696a      	ldr	r2, [r5, #20]
 8001fd0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d092      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
 8001fda:	e7af      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	42420440 	.word	0x42420440
 8001fe8:	42420070 	.word	0x42420070

08001fec <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff0:	6805      	ldr	r5, [r0, #0]
 8001ff2:	68c2      	ldr	r2, [r0, #12]
 8001ff4:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ff6:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002000:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002002:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002004:	430b      	orrs	r3, r1
 8002006:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002008:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800200c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002010:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002012:	4313      	orrs	r3, r2
 8002014:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002016:	696b      	ldr	r3, [r5, #20]
 8002018:	6982      	ldr	r2, [r0, #24]
 800201a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800201e:	4313      	orrs	r3, r2
 8002020:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002022:	4b40      	ldr	r3, [pc, #256]	; (8002124 <UART_SetConfig+0x138>)
{
 8002024:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002026:	429d      	cmp	r5, r3
 8002028:	f04f 0419 	mov.w	r4, #25
 800202c:	d146      	bne.n	80020bc <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800202e:	f7ff ff0f 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 8002032:	fb04 f300 	mul.w	r3, r4, r0
 8002036:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800203a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800203e:	00b6      	lsls	r6, r6, #2
 8002040:	fbb3 f3f6 	udiv	r3, r3, r6
 8002044:	fbb3 f3f8 	udiv	r3, r3, r8
 8002048:	011e      	lsls	r6, r3, #4
 800204a:	f7ff ff01 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 800204e:	4360      	muls	r0, r4
 8002050:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	fbb0 f7f3 	udiv	r7, r0, r3
 800205a:	f7ff fef9 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 800205e:	4360      	muls	r0, r4
 8002060:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fbb0 f3f3 	udiv	r3, r0, r3
 800206a:	fbb3 f3f8 	udiv	r3, r3, r8
 800206e:	fb08 7313 	mls	r3, r8, r3, r7
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	3332      	adds	r3, #50	; 0x32
 8002076:	fbb3 f3f8 	udiv	r3, r3, r8
 800207a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800207e:	f7ff fee7 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
 8002082:	4360      	muls	r0, r4
 8002084:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	fbb0 faf2 	udiv	sl, r0, r2
 800208e:	f7ff fedf 	bl	8001e50 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002092:	4360      	muls	r0, r4
 8002094:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	fbb0 f3f3 	udiv	r3, r0, r3
 800209e:	fbb3 f3f8 	udiv	r3, r3, r8
 80020a2:	fb08 a313 	mls	r3, r8, r3, sl
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	3332      	adds	r3, #50	; 0x32
 80020aa:	fbb3 f3f8 	udiv	r3, r3, r8
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	433b      	orrs	r3, r7
 80020b4:	4433      	add	r3, r6
 80020b6:	60ab      	str	r3, [r5, #8]
 80020b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020bc:	f7ff feb8 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80020c0:	fb04 f300 	mul.w	r3, r4, r0
 80020c4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80020c8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80020cc:	00b6      	lsls	r6, r6, #2
 80020ce:	fbb3 f3f6 	udiv	r3, r3, r6
 80020d2:	fbb3 f3f8 	udiv	r3, r3, r8
 80020d6:	011e      	lsls	r6, r3, #4
 80020d8:	f7ff feaa 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80020dc:	4360      	muls	r0, r4
 80020de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fbb0 f7f3 	udiv	r7, r0, r3
 80020e8:	f7ff fea2 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80020ec:	4360      	muls	r0, r4
 80020ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f8:	fbb3 f3f8 	udiv	r3, r3, r8
 80020fc:	fb08 7313 	mls	r3, r8, r3, r7
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	3332      	adds	r3, #50	; 0x32
 8002104:	fbb3 f3f8 	udiv	r3, r3, r8
 8002108:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800210c:	f7ff fe90 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002110:	4360      	muls	r0, r4
 8002112:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	fbb0 faf2 	udiv	sl, r0, r2
 800211c:	f7ff fe88 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002120:	e7b7      	b.n	8002092 <UART_SetConfig+0xa6>
 8002122:	bf00      	nop
 8002124:	40013800 	.word	0x40013800

08002128 <HAL_UART_Init>:
{
 8002128:	b510      	push	{r4, lr}
  if(huart == NULL)
 800212a:	4604      	mov	r4, r0
 800212c:	b340      	cbz	r0, 8002180 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800212e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002132:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002136:	b91b      	cbnz	r3, 8002140 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002138:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800213c:	f000 fdb2 	bl	8002ca4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002140:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002142:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002144:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002148:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800214a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800214c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002150:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002152:	f7ff ff4b 	bl	8001fec <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002156:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002158:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002168:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002170:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002172:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002174:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002176:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800217a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800217e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
}
 8002182:	bd10      	pop	{r4, pc}

08002184 <nastavUbin>:
	Ibinar = (uint32_t)(prud/IkonstNastav);
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_2,DAC_ALIGN_12B_R, Ibinar);
}
void nastavUbin(uint32_t Ubinar)
{
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R, Ubinar);
 8002184:	2200      	movs	r2, #0
 8002186:	4603      	mov	r3, r0
 8002188:	4611      	mov	r1, r2
 800218a:	4801      	ldr	r0, [pc, #4]	; (8002190 <nastavUbin+0xc>)
 800218c:	f7fe be2d 	b.w	8000dea <HAL_DAC_SetValue>
 8002190:	20000994 	.word	0x20000994

08002194 <nastavIbin>:
}
void nastavIbin(uint32_t Ibinar)
{
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_2,DAC_ALIGN_12B_R, Ibinar);
 8002194:	4603      	mov	r3, r0
 8002196:	2200      	movs	r2, #0
 8002198:	2110      	movs	r1, #16
 800219a:	4801      	ldr	r0, [pc, #4]	; (80021a0 <nastavIbin+0xc>)
 800219c:	f7fe be25 	b.w	8000dea <HAL_DAC_SetValue>
 80021a0:	20000994 	.word	0x20000994

080021a4 <vypisOLED>:
}
void vypisOLED()
{
 80021a4:	b510      	push	{r4, lr}
	char text [20];
	//SSD1306_Init ();
	SSD1306_Fill (0);
 80021a6:	2000      	movs	r0, #0
{
 80021a8:	b086      	sub	sp, #24
	SSD1306_Fill (0);
 80021aa:	f000 fae9 	bl	8002780 <SSD1306_Fill>
	SSD1306_GotoXY (2, 0);
 80021ae:	2100      	movs	r1, #0
 80021b0:	2002      	movs	r0, #2
 80021b2:	f000 fb15 	bl	80027e0 <SSD1306_GotoXY>
	//sprintf(text,"Uz:%.2d V",Pot1);
	sprintf(text,"Uz:%d V",BPot1);
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <vypisOLED+0xac>)
	SSD1306_Puts (text, &Font_7x10, 1);
 80021b8:	4c26      	ldr	r4, [pc, #152]	; (8002254 <vypisOLED+0xb0>)
	sprintf(text,"Uz:%d V",BPot1);
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4926      	ldr	r1, [pc, #152]	; (8002258 <vypisOLED+0xb4>)
 80021be:	a801      	add	r0, sp, #4
 80021c0:	f000 fe10 	bl	8002de4 <siprintf>
	SSD1306_Puts (text, &Font_7x10, 1);
 80021c4:	2201      	movs	r2, #1
 80021c6:	4621      	mov	r1, r4
 80021c8:	a801      	add	r0, sp, #4
 80021ca:	f000 fb5b 	bl	8002884 <SSD1306_Puts>
	//SSD1306_UpdateScreen();
	SSD1306_GotoXY (2, 12);
 80021ce:	210c      	movs	r1, #12
 80021d0:	2002      	movs	r0, #2
 80021d2:	f000 fb05 	bl	80027e0 <SSD1306_GotoXY>
	//sprintf(text,"Um:%.2d V",(float)meraneU);
	sprintf(text,"Um:%d V",BmeraneU);
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <vypisOLED+0xb8>)
 80021d8:	4921      	ldr	r1, [pc, #132]	; (8002260 <vypisOLED+0xbc>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	a801      	add	r0, sp, #4
 80021de:	f000 fe01 	bl	8002de4 <siprintf>
	SSD1306_Puts (text, &Font_7x10, 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	4621      	mov	r1, r4
 80021e6:	a801      	add	r0, sp, #4
 80021e8:	f000 fb4c 	bl	8002884 <SSD1306_Puts>
	//SSD1306_UpdateScreen();
	SSD1306_GotoXY (2, 24);
 80021ec:	2118      	movs	r1, #24
 80021ee:	2002      	movs	r0, #2
 80021f0:	f000 faf6 	bl	80027e0 <SSD1306_GotoXY>
	//sprintf(text,"Iz:%.2d A",(float)Pot2);
	sprintf(text,"Iz:%d A",BPot2);
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <vypisOLED+0xc0>)
 80021f6:	491c      	ldr	r1, [pc, #112]	; (8002268 <vypisOLED+0xc4>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	a801      	add	r0, sp, #4
 80021fc:	f000 fdf2 	bl	8002de4 <siprintf>
	SSD1306_Puts (text, &Font_7x10, 1);
 8002200:	2201      	movs	r2, #1
 8002202:	4621      	mov	r1, r4
 8002204:	a801      	add	r0, sp, #4
 8002206:	f000 fb3d 	bl	8002884 <SSD1306_Puts>
	//SSD1306_UpdateScreen();
	SSD1306_GotoXY (2, 36);
 800220a:	2124      	movs	r1, #36	; 0x24
 800220c:	2002      	movs	r0, #2
 800220e:	f000 fae7 	bl	80027e0 <SSD1306_GotoXY>
	//sprintf(text,"Im:%.2d A",(float)meraneI);
	sprintf(text,"Im:%d A",BmeraneI);
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <vypisOLED+0xc8>)
 8002214:	4916      	ldr	r1, [pc, #88]	; (8002270 <vypisOLED+0xcc>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	a801      	add	r0, sp, #4
 800221a:	f000 fde3 	bl	8002de4 <siprintf>
	SSD1306_Puts (text, &Font_7x10, 1);
 800221e:	2201      	movs	r2, #1
 8002220:	4621      	mov	r1, r4
 8002222:	a801      	add	r0, sp, #4
 8002224:	f000 fb2e 	bl	8002884 <SSD1306_Puts>
	SSD1306_GotoXY (2, 48);
 8002228:	2130      	movs	r1, #48	; 0x30
 800222a:	2002      	movs	r0, #2
 800222c:	f000 fad8 	bl	80027e0 <SSD1306_GotoXY>
	sprintf(text,"IMD:%s BMS:%s","ok","ok");
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <vypisOLED+0xd0>)
 8002232:	4911      	ldr	r1, [pc, #68]	; (8002278 <vypisOLED+0xd4>)
 8002234:	461a      	mov	r2, r3
 8002236:	a801      	add	r0, sp, #4
 8002238:	f000 fdd4 	bl	8002de4 <siprintf>
	SSD1306_Puts (text, &Font_7x10, 1);
 800223c:	2201      	movs	r2, #1
 800223e:	4621      	mov	r1, r4
 8002240:	a801      	add	r0, sp, #4
 8002242:	f000 fb1f 	bl	8002884 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002246:	f000 fb63 	bl	8002910 <SSD1306_UpdateScreen>

}
 800224a:	b006      	add	sp, #24
 800224c:	bd10      	pop	{r4, pc}
 800224e:	bf00      	nop
 8002250:	20000990 	.word	0x20000990
 8002254:	20000018 	.word	0x20000018
 8002258:	08005ecd 	.word	0x08005ecd
 800225c:	20000a4c 	.word	0x20000a4c
 8002260:	08005ed5 	.word	0x08005ed5
 8002264:	200009f4 	.word	0x200009f4
 8002268:	08005edd 	.word	0x08005edd
 800226c:	20000514 	.word	0x20000514
 8002270:	08005ee5 	.word	0x08005ee5
 8002274:	08005eed 	.word	0x08005eed
 8002278:	08005ef0 	.word	0x08005ef0

0800227c <DMAMeranie>:
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R, valByte2);
		//HAL_Delay(1);
	}
}
void DMAMeranie()
{
 800227c:	2300      	movs	r3, #0
 800227e:	b570      	push	{r4, r5, r6, lr}
 8002280:	4619      	mov	r1, r3
 8002282:	4618      	mov	r0, r3
 8002284:	461c      	mov	r4, r3
 8002286:	4a15      	ldr	r2, [pc, #84]	; (80022dc <DMAMeranie+0x60>)
 8002288:	f502 757c 	add.w	r5, r2, #1008	; 0x3f0
	MeanPot1B=0;
	MeanPot2B=0;
	MeanPot2B=0;
	for(int counterF=0;counterF<126;counterF++)
		{
			  		MeanUbin+=ADC1_BUF[counterF][0];
 800228c:	8816      	ldrh	r6, [r2, #0]
 800228e:	3208      	adds	r2, #8
 8002290:	4434      	add	r4, r6
			  		MeanIbin+=ADC1_BUF[counterF][1];
 8002292:	f832 6c06 	ldrh.w	r6, [r2, #-6]
 8002296:	4430      	add	r0, r6
			  		MeanPot1B+=ADC1_BUF[counterF][2];
 8002298:	f832 6c04 	ldrh.w	r6, [r2, #-4]
 800229c:	4431      	add	r1, r6
					MeanPot2B+=ADC1_BUF[counterF][3];
 800229e:	f832 6c02 	ldrh.w	r6, [r2, #-2]
	for(int counterF=0;counterF<126;counterF++)
 80022a2:	4295      	cmp	r5, r2
					MeanPot2B+=ADC1_BUF[counterF][3];
 80022a4:	4433      	add	r3, r6
	for(int counterF=0;counterF<126;counterF++)
 80022a6:	d1f1      	bne.n	800228c <DMAMeranie+0x10>
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <DMAMeranie+0x64>)
		}
	BmeraneU=MeanUbin/126;
 80022aa:	4d0e      	ldr	r5, [pc, #56]	; (80022e4 <DMAMeranie+0x68>)
 80022ac:	6014      	str	r4, [r2, #0]
 80022ae:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <DMAMeranie+0x6c>)
 80022b0:	6010      	str	r0, [r2, #0]
 80022b2:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <DMAMeranie+0x70>)
 80022b4:	6011      	str	r1, [r2, #0]
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <DMAMeranie+0x74>)
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	227e      	movs	r2, #126	; 0x7e
 80022bc:	fbb4 f4f2 	udiv	r4, r4, r2
	BmeraneI=MeanIbin/126;
 80022c0:	fbb0 f0f2 	udiv	r0, r0, r2
	BPot1=MeanPot1B/126;
 80022c4:	fbb1 f1f2 	udiv	r1, r1, r2
	BPot2=MeanPot2B/126;
 80022c8:	fbb3 f3f2 	udiv	r3, r3, r2
	BmeraneU=MeanUbin/126;
 80022cc:	602c      	str	r4, [r5, #0]
	BmeraneI=MeanIbin/126;
 80022ce:	4c09      	ldr	r4, [pc, #36]	; (80022f4 <DMAMeranie+0x78>)
	BPot2=MeanPot2B/126;
 80022d0:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <DMAMeranie+0x7c>)
	BmeraneI=MeanIbin/126;
 80022d2:	6020      	str	r0, [r4, #0]
	BPot1=MeanPot1B/126;
 80022d4:	4809      	ldr	r0, [pc, #36]	; (80022fc <DMAMeranie+0x80>)
	BPot2=MeanPot2B/126;
 80022d6:	6013      	str	r3, [r2, #0]
	BPot1=MeanPot1B/126;
 80022d8:	6001      	str	r1, [r0, #0]
	BPot2=MeanPot2B/126;
 80022da:	bd70      	pop	{r4, r5, r6, pc}
 80022dc:	20000518 	.word	0x20000518
 80022e0:	200009f8 	.word	0x200009f8
 80022e4:	20000a4c 	.word	0x20000a4c
 80022e8:	200004bc 	.word	0x200004bc
 80022ec:	200009ec 	.word	0x200009ec
 80022f0:	20000a48 	.word	0x20000a48
 80022f4:	20000514 	.word	0x20000514
 80022f8:	200009f4 	.word	0x200009f4
 80022fc:	20000990 	.word	0x20000990

08002300 <InitVypis>:
	//HAL_ADC_Start_IT(&hadc1);
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC1_BUF,4);

}
void InitVypis()
{
 8002300:	b508      	push	{r3, lr}
	SSD1306_Init ();
 8002302:	f000 fb27 	bl	8002954 <SSD1306_Init>
	SSD1306_Fill (0);
 8002306:	2000      	movs	r0, #0
 8002308:	f000 fa3a 	bl	8002780 <SSD1306_Fill>
	SSD1306_GotoXY (40, 0);
 800230c:	2100      	movs	r1, #0
 800230e:	2028      	movs	r0, #40	; 0x28
 8002310:	f000 fa66 	bl	80027e0 <SSD1306_GotoXY>
	SSD1306_Puts ("NES", &Font_16x26, 1);
 8002314:	2201      	movs	r2, #1
 8002316:	490f      	ldr	r1, [pc, #60]	; (8002354 <InitVypis+0x54>)
 8002318:	480f      	ldr	r0, [pc, #60]	; (8002358 <InitVypis+0x58>)
 800231a:	f000 fab3 	bl	8002884 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800231e:	f000 faf7 	bl	8002910 <SSD1306_UpdateScreen>
	SSD1306_GotoXY (30, 26);
 8002322:	211a      	movs	r1, #26
 8002324:	201e      	movs	r0, #30
 8002326:	f000 fa5b 	bl	80027e0 <SSD1306_GotoXY>
	SSD1306_Puts ("CHARGER", &Font_11x18, 1);
 800232a:	2201      	movs	r2, #1
 800232c:	490b      	ldr	r1, [pc, #44]	; (800235c <InitVypis+0x5c>)
 800232e:	480c      	ldr	r0, [pc, #48]	; (8002360 <InitVypis+0x60>)
 8002330:	f000 faa8 	bl	8002884 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002334:	f000 faec 	bl	8002910 <SSD1306_UpdateScreen>
	SSD1306_GotoXY (10, 50);
 8002338:	2132      	movs	r1, #50	; 0x32
 800233a:	200a      	movs	r0, #10
 800233c:	f000 fa50 	bl	80027e0 <SSD1306_GotoXY>
	SSD1306_Puts ("STUBA GREEN TEAM", &Font_7x10, 1);
 8002340:	2201      	movs	r2, #1
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <InitVypis+0x64>)
 8002344:	4808      	ldr	r0, [pc, #32]	; (8002368 <InitVypis+0x68>)
 8002346:	f000 fa9d 	bl	8002884 <SSD1306_Puts>
	SSD1306_UpdateScreen();
}
 800234a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SSD1306_UpdateScreen();
 800234e:	f000 badf 	b.w	8002910 <SSD1306_UpdateScreen>
 8002352:	bf00      	nop
 8002354:	20000010 	.word	0x20000010
 8002358:	08005eb0 	.word	0x08005eb0
 800235c:	20000008 	.word	0x20000008
 8002360:	08005eb4 	.word	0x08005eb4
 8002364:	20000018 	.word	0x20000018
 8002368:	08005ebc 	.word	0x08005ebc

0800236c <BlockVypis>:
void BlockVypis()
{
 800236c:	b510      	push	{r4, lr}
	char text [20];
		//SSD1306_Init ();
		SSD1306_Fill (0);
 800236e:	2000      	movs	r0, #0
{
 8002370:	b086      	sub	sp, #24

		SSD1306_GotoXY (2, 0);
		SSD1306_Puts ("Vynuluj", &Font_11x18, 1);
 8002372:	4c1b      	ldr	r4, [pc, #108]	; (80023e0 <BlockVypis+0x74>)
		SSD1306_Fill (0);
 8002374:	f000 fa04 	bl	8002780 <SSD1306_Fill>
		SSD1306_GotoXY (2, 0);
 8002378:	2100      	movs	r1, #0
 800237a:	2002      	movs	r0, #2
 800237c:	f000 fa30 	bl	80027e0 <SSD1306_GotoXY>
		SSD1306_Puts ("Vynuluj", &Font_11x18, 1);
 8002380:	2201      	movs	r2, #1
 8002382:	4621      	mov	r1, r4
 8002384:	4817      	ldr	r0, [pc, #92]	; (80023e4 <BlockVypis+0x78>)
 8002386:	f000 fa7d 	bl	8002884 <SSD1306_Puts>
		SSD1306_GotoXY (60, 15);
 800238a:	210f      	movs	r1, #15
 800238c:	203c      	movs	r0, #60	; 0x3c
 800238e:	f000 fa27 	bl	80027e0 <SSD1306_GotoXY>
				SSD1306_Puts ("zdroj", &Font_11x18, 1);
 8002392:	2201      	movs	r2, #1
 8002394:	4621      	mov	r1, r4
 8002396:	4814      	ldr	r0, [pc, #80]	; (80023e8 <BlockVypis+0x7c>)
 8002398:	f000 fa74 	bl	8002884 <SSD1306_Puts>

		SSD1306_GotoXY (2, 30);
 800239c:	211e      	movs	r1, #30
 800239e:	2002      	movs	r0, #2
 80023a0:	f000 fa1e 	bl	80027e0 <SSD1306_GotoXY>
		sprintf(text,"Uz:%d V",BPot1);
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <BlockVypis+0x80>)
 80023a6:	4912      	ldr	r1, [pc, #72]	; (80023f0 <BlockVypis+0x84>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	a801      	add	r0, sp, #4
 80023ac:	f000 fd1a 	bl	8002de4 <siprintf>
		SSD1306_Puts (text, &Font_11x18, 1);
 80023b0:	2201      	movs	r2, #1
 80023b2:	4621      	mov	r1, r4
 80023b4:	a801      	add	r0, sp, #4
 80023b6:	f000 fa65 	bl	8002884 <SSD1306_Puts>

		SSD1306_GotoXY (2, 45);
 80023ba:	212d      	movs	r1, #45	; 0x2d
 80023bc:	2002      	movs	r0, #2
 80023be:	f000 fa0f 	bl	80027e0 <SSD1306_GotoXY>
		sprintf(text,"Iz:%d A",BPot2);
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <BlockVypis+0x88>)
 80023c4:	490c      	ldr	r1, [pc, #48]	; (80023f8 <BlockVypis+0x8c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	a801      	add	r0, sp, #4
 80023ca:	f000 fd0b 	bl	8002de4 <siprintf>
		SSD1306_Puts (text, &Font_11x18, 1);
 80023ce:	2201      	movs	r2, #1
 80023d0:	4621      	mov	r1, r4
 80023d2:	a801      	add	r0, sp, #4
 80023d4:	f000 fa56 	bl	8002884 <SSD1306_Puts>
		//SSD1306_UpdateScreen();


		SSD1306_UpdateScreen();
 80023d8:	f000 fa9a 	bl	8002910 <SSD1306_UpdateScreen>
}
 80023dc:	b006      	add	sp, #24
 80023de:	bd10      	pop	{r4, pc}
 80023e0:	20000008 	.word	0x20000008
 80023e4:	08005ea2 	.word	0x08005ea2
 80023e8:	08005eaa 	.word	0x08005eaa
 80023ec:	20000990 	.word	0x20000990
 80023f0:	08005ecd 	.word	0x08005ecd
 80023f4:	200009f4 	.word	0x200009f4
 80023f8:	08005edd 	.word	0x08005edd

080023fc <PrimitivneOvladanie>:
void PrimitivneOvladanie()
{
 80023fc:	b508      	push	{r3, lr}
//PriameMeranie();
DMAMeranie();
 80023fe:	f7ff ff3d 	bl	800227c <DMAMeranie>
nastavUbin(BPot1);
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <PrimitivneOvladanie+0x24>)
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	f7ff febd 	bl	8002184 <nastavUbin>
nastavIbin(BPot2);
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <PrimitivneOvladanie+0x28>)
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	f7ff fec1 	bl	8002194 <nastavIbin>
//DACtest();
vypisOLED();
 8002412:	f7ff fec7 	bl	80021a4 <vypisOLED>
HAL_Delay(10);
//testvypis();
}
 8002416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
HAL_Delay(10);
 800241a:	200a      	movs	r0, #10
 800241c:	f7fe b8d2 	b.w	80005c4 <HAL_Delay>
 8002420:	20000990 	.word	0x20000990
 8002424:	200009f4 	.word	0x200009f4

08002428 <Mode0>:

void Mode0()
{
 8002428:	b508      	push	{r3, lr}
	while(1)
	{
		nastavIbin(0);
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff feb2 	bl	8002194 <nastavIbin>
		nastavUbin(0);
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff fea7 	bl	8002184 <nastavUbin>
		InitVypis();
 8002436:	f7ff ff63 	bl	8002300 <InitVypis>
 800243a:	e7f6      	b.n	800242a <Mode0+0x2>

0800243c <SystemClock_Config>:

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800243c:	2310      	movs	r3, #16
{
 800243e:	b530      	push	{r4, r5, lr}
 8002440:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002442:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002444:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002446:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8002448:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800244c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800244e:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002450:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002452:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8002454:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002456:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002458:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 800245a:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800245c:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800245e:	f7ff f9ef 	bl	8001840 <HAL_RCC_OscConfig>
 8002462:	b100      	cbz	r0, 8002466 <SystemClock_Config+0x2a>
 8002464:	e7fe      	b.n	8002464 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002466:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002468:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800246a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800246c:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800246e:	4629      	mov	r1, r5
 8002470:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002472:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002474:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002476:	f7ff fc31 	bl	8001cdc <HAL_RCC_ClockConfig>
 800247a:	b100      	cbz	r0, 800247e <SystemClock_Config+0x42>
 800247c:	e7fe      	b.n	800247c <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800247e:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002480:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002482:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002484:	f7ff fcf4 	bl	8001e70 <HAL_RCCEx_PeriphCLKConfig>
 8002488:	4604      	mov	r4, r0
 800248a:	b100      	cbz	r0, 800248e <SystemClock_Config+0x52>
 800248c:	e7fe      	b.n	800248c <SystemClock_Config+0x50>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800248e:	f7ff fcc9 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8002492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002496:	fbb0 f0f3 	udiv	r0, r0, r3
 800249a:	f7fe fc25 	bl	8000ce8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800249e:	2004      	movs	r0, #4
 80024a0:	f7fe fc38 	bl	8000d14 <HAL_SYSTICK_CLKSourceConfig>

    /**Configure the Systick interrupt time 
    */
  __HAL_RCC_PLLI2S_ENABLE();
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SystemClock_Config+0x7c>)

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024a6:	4622      	mov	r2, r4
  __HAL_RCC_PLLI2S_ENABLE();
 80024a8:	601d      	str	r5, [r3, #0]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024aa:	4621      	mov	r1, r4
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7fe fbda 	bl	8000c68 <HAL_NVIC_SetPriority>
}
 80024b4:	b01d      	add	sp, #116	; 0x74
 80024b6:	bd30      	pop	{r4, r5, pc}
 80024b8:	42420070 	.word	0x42420070

080024bc <main>:
{
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024be:	4c9d      	ldr	r4, [pc, #628]	; (8002734 <main+0x278>)
{
 80024c0:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80024c2:	f7fe f85b 	bl	800057c <HAL_Init>
  SystemClock_Config();
 80024c6:	f7ff ffb9 	bl	800243c <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ca:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blokacia_GPIO_Port, blokacia_Pin, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ce:	f043 0320 	orr.w	r3, r3, #32
 80024d2:	61a3      	str	r3, [r4, #24]
 80024d4:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(blokacia_GPIO_Port, blokacia_Pin, GPIO_PIN_RESET);
 80024d6:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(blokacia_GPIO_Port, blokacia_Pin, GPIO_PIN_RESET);
 80024e2:	4895      	ldr	r0, [pc, #596]	; (8002738 <main+0x27c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	61a3      	str	r3, [r4, #24]
 80024ea:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin|led4_Pin 
                          |led5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : blokacia_Pin */
  GPIO_InitStruct.Pin = blokacia_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ec:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	9303      	str	r3, [sp, #12]
 80024f4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	61a3      	str	r3, [r4, #24]
 8002500:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(blokacia_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : prehriatie_Pin */
  GPIO_InitStruct.Pin = prehriatie_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002502:	2500      	movs	r5, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	9304      	str	r3, [sp, #16]
 800250a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250c:	69a3      	ldr	r3, [r4, #24]
 800250e:	f043 0310 	orr.w	r3, r3, #16
 8002512:	61a3      	str	r3, [r4, #24]
 8002514:	69a3      	ldr	r3, [r4, #24]
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	9305      	str	r3, [sp, #20]
 800251c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(blokacia_GPIO_Port, blokacia_Pin, GPIO_PIN_RESET);
 800251e:	f7fe feb5 	bl	800128c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin|led3_Pin|led4_Pin 
 8002522:	2200      	movs	r2, #0
 8002524:	f640 4107 	movw	r1, #3079	; 0xc07
 8002528:	4884      	ldr	r0, [pc, #528]	; (800273c <main+0x280>)
 800252a:	f7fe feaf 	bl	800128c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = blokacia_Pin;
 800252e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(blokacia_GPIO_Port, &GPIO_InitStruct);
 8002530:	a906      	add	r1, sp, #24
 8002532:	4881      	ldr	r0, [pc, #516]	; (8002738 <main+0x27c>)
  GPIO_InitStruct.Pin = blokacia_Pin;
 8002534:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002536:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(blokacia_GPIO_Port, &GPIO_InitStruct);
 800253a:	f7fe fdc7 	bl	80010cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = prehriatie_Pin;
 800253e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(prehriatie_GPIO_Port, &GPIO_InitStruct);
 8002540:	a906      	add	r1, sp, #24
 8002542:	487d      	ldr	r0, [pc, #500]	; (8002738 <main+0x27c>)
  GPIO_InitStruct.Pin = prehriatie_Pin;
 8002544:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002546:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(prehriatie_GPIO_Port, &GPIO_InitStruct);
 800254a:	f7fe fdbf 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin led4_Pin 
                           led5_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin 
 800254e:	f640 4307 	movw	r3, #3079	; 0xc07
                          |led5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	a906      	add	r1, sp, #24
 8002554:	4879      	ldr	r0, [pc, #484]	; (800273c <main+0x280>)
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin 
 8002556:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002558:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255c:	f7fe fdb6 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN1_Pin PIN2_Pin PIN3_Pin PIN4_Pin */
  GPIO_InitStruct.Pin = PIN1_Pin|PIN2_Pin|PIN3_Pin|PIN4_Pin;
 8002560:	f44f 7370 	mov.w	r3, #960	; 0x3c0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002564:	a906      	add	r1, sp, #24
 8002566:	4876      	ldr	r0, [pc, #472]	; (8002740 <main+0x284>)
  GPIO_InitStruct.Pin = PIN1_Pin|PIN2_Pin|PIN3_Pin|PIN4_Pin;
 8002568:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256e:	f7fe fdad 	bl	80010cc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002572:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002574:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002576:	4333      	orrs	r3, r6
 8002578:	6163      	str	r3, [r4, #20]
 800257a:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800257c:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800257e:	4033      	ands	r3, r6
 8002580:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002582:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002584:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002586:	f7fe fb6f 	bl	8000c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800258a:	200b      	movs	r0, #11
 800258c:	f7fe fba0 	bl	8000cd0 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8002590:	4c6c      	ldr	r4, [pc, #432]	; (8002744 <main+0x288>)
 8002592:	4b6d      	ldr	r3, [pc, #436]	; (8002748 <main+0x28c>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002594:	6165      	str	r5, [r4, #20]
  hadc1.Instance = ADC1;
 8002596:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002598:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800259c:	6065      	str	r5, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800259e:	60a3      	str	r3, [r4, #8]
  hadc1.Init.NbrOfConversion = 4;
 80025a0:	2504      	movs	r5, #4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025a2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025a6:	4620      	mov	r0, r4
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025a8:	60e6      	str	r6, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025aa:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 4;
 80025ac:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025ae:	f7fe fa3b 	bl	8000a28 <HAL_ADC_Init>
 80025b2:	b100      	cbz	r0, 80025b6 <main+0xfa>
 80025b4:	e7fe      	b.n	80025b4 <main+0xf8>
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80025b6:	2306      	movs	r3, #6
  sConfig.Channel = ADC_CHANNEL_0;
 80025b8:	9006      	str	r0, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ba:	a906      	add	r1, sp, #24
 80025bc:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025be:	9607      	str	r6, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80025c0:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025c2:	f7fe f8c5 	bl	8000750 <HAL_ADC_ConfigChannel>
 80025c6:	b100      	cbz	r0, 80025ca <main+0x10e>
 80025c8:	e7fe      	b.n	80025c8 <main+0x10c>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ca:	a906      	add	r1, sp, #24
 80025cc:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80025ce:	9606      	str	r6, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025d0:	9707      	str	r7, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025d2:	f7fe f8bd 	bl	8000750 <HAL_ADC_ConfigChannel>
 80025d6:	b100      	cbz	r0, 80025da <main+0x11e>
 80025d8:	e7fe      	b.n	80025d8 <main+0x11c>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80025da:	2603      	movs	r6, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025dc:	a906      	add	r1, sp, #24
 80025de:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80025e0:	9706      	str	r7, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80025e2:	9607      	str	r6, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e4:	f7fe f8b4 	bl	8000750 <HAL_ADC_ConfigChannel>
 80025e8:	b100      	cbz	r0, 80025ec <main+0x130>
 80025ea:	e7fe      	b.n	80025ea <main+0x12e>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ec:	a906      	add	r1, sp, #24
 80025ee:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80025f0:	9606      	str	r6, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80025f2:	9507      	str	r5, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f4:	f7fe f8ac 	bl	8000750 <HAL_ADC_ConfigChannel>
 80025f8:	b100      	cbz	r0, 80025fc <main+0x140>
 80025fa:	e7fe      	b.n	80025fa <main+0x13e>
  hcan1.Init.Prescaler = 16;
 80025fc:	2510      	movs	r5, #16
  hcan1.Instance = CAN1;
 80025fe:	4b53      	ldr	r3, [pc, #332]	; (800274c <main+0x290>)
  hcan1.Init.Prescaler = 16;
 8002600:	4a53      	ldr	r2, [pc, #332]	; (8002750 <main+0x294>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002602:	6098      	str	r0, [r3, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
 8002604:	60d8      	str	r0, [r3, #12]
  hcan1.Init.BS1 = CAN_BS1_1TQ;
 8002606:	6118      	str	r0, [r3, #16]
  hcan1.Init.BS2 = CAN_BS2_1TQ;
 8002608:	6158      	str	r0, [r3, #20]
  hcan1.Init.TTCM = DISABLE;
 800260a:	6198      	str	r0, [r3, #24]
  hcan1.Init.ABOM = DISABLE;
 800260c:	61d8      	str	r0, [r3, #28]
  hcan1.Init.AWUM = DISABLE;
 800260e:	6218      	str	r0, [r3, #32]
  hcan1.Init.NART = DISABLE;
 8002610:	6258      	str	r0, [r3, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 8002612:	6298      	str	r0, [r3, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 8002614:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002616:	4618      	mov	r0, r3
  hcan1.Init.Prescaler = 16;
 8002618:	e883 0024 	stmia.w	r3, {r2, r5}
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800261c:	f7fe fa85 	bl	8000b2a <HAL_CAN_Init>
 8002620:	b100      	cbz	r0, 8002624 <main+0x168>
 8002622:	e7fe      	b.n	8002622 <main+0x166>
  hdac.Instance = DAC;
 8002624:	4c4b      	ldr	r4, [pc, #300]	; (8002754 <main+0x298>)
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <main+0x29c>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002628:	4620      	mov	r0, r4
  hdac.Instance = DAC;
 800262a:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800262c:	f7fe fb83 	bl	8000d36 <HAL_DAC_Init>
 8002630:	4602      	mov	r2, r0
 8002632:	b100      	cbz	r0, 8002636 <main+0x17a>
 8002634:	e7fe      	b.n	8002634 <main+0x178>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002636:	9006      	str	r0, [sp, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002638:	9007      	str	r0, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800263a:	a906      	add	r1, sp, #24
 800263c:	4620      	mov	r0, r4
 800263e:	f7fe fbb4 	bl	8000daa <HAL_DAC_ConfigChannel>
 8002642:	b100      	cbz	r0, 8002646 <main+0x18a>
 8002644:	e7fe      	b.n	8002644 <main+0x188>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002646:	462a      	mov	r2, r5
 8002648:	a906      	add	r1, sp, #24
 800264a:	4620      	mov	r0, r4
 800264c:	f7fe fbad 	bl	8000daa <HAL_DAC_ConfigChannel>
 8002650:	b100      	cbz	r0, 8002654 <main+0x198>
 8002652:	e7fe      	b.n	8002652 <main+0x196>
  hi2c1.Instance = I2C1;
 8002654:	4b41      	ldr	r3, [pc, #260]	; (800275c <main+0x2a0>)
  hi2c1.Init.ClockSpeed = 400000;
 8002656:	4a42      	ldr	r2, [pc, #264]	; (8002760 <main+0x2a4>)
 8002658:	4d42      	ldr	r5, [pc, #264]	; (8002764 <main+0x2a8>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800265a:	6098      	str	r0, [r3, #8]
  hi2c1.Init.ClockSpeed = 400000;
 800265c:	e883 0024 	stmia.w	r3, {r2, r5}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002660:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002664:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002666:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002668:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800266a:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800266c:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800266e:	4618      	mov	r0, r3
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002670:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002672:	f7fe fedf 	bl	8001434 <HAL_I2C_Init>
 8002676:	b100      	cbz	r0, 800267a <main+0x1be>
 8002678:	e7fe      	b.n	8002678 <main+0x1bc>
  huart1.Init.BaudRate = 115200;
 800267a:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart1.Instance = USART1;
 800267e:	483a      	ldr	r0, [pc, #232]	; (8002768 <main+0x2ac>)
  huart1.Init.BaudRate = 115200;
 8002680:	4b3a      	ldr	r3, [pc, #232]	; (800276c <main+0x2b0>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002682:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8002684:	e880 0018 	stmia.w	r0, {r3, r4}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002688:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800268a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800268c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800268e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002690:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002692:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002694:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002696:	f7ff fd47 	bl	8002128 <HAL_UART_Init>
 800269a:	4604      	mov	r4, r0
 800269c:	b100      	cbz	r0, 80026a0 <main+0x1e4>
 800269e:	e7fe      	b.n	800269e <main+0x1e2>
  mode=1;
 80026a0:	2301      	movs	r3, #1
 80026a2:	4d33      	ldr	r5, [pc, #204]	; (8002770 <main+0x2b4>)
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC1_BUF,512);
 80026a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a8:	4932      	ldr	r1, [pc, #200]	; (8002774 <main+0x2b8>)
 80026aa:	4826      	ldr	r0, [pc, #152]	; (8002744 <main+0x288>)
  mode=1;
 80026ac:	702b      	strb	r3, [r5, #0]
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC1_BUF,512);
 80026ae:	f7fe f90b 	bl	80008c8 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 80026b2:	4621      	mov	r1, r4
 80026b4:	4827      	ldr	r0, [pc, #156]	; (8002754 <main+0x298>)
 80026b6:	f7fe fb51 	bl	8000d5c <HAL_DAC_Start>
  HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 80026ba:	2110      	movs	r1, #16
 80026bc:	4825      	ldr	r0, [pc, #148]	; (8002754 <main+0x298>)
 80026be:	f7fe fb4d 	bl	8000d5c <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R, nula);
 80026c2:	4623      	mov	r3, r4
 80026c4:	4622      	mov	r2, r4
 80026c6:	4621      	mov	r1, r4
 80026c8:	4822      	ldr	r0, [pc, #136]	; (8002754 <main+0x298>)
 80026ca:	f7fe fb8e 	bl	8000dea <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac,DAC_CHANNEL_2,DAC_ALIGN_12B_R, nula);
 80026ce:	4623      	mov	r3, r4
 80026d0:	4622      	mov	r2, r4
 80026d2:	2110      	movs	r1, #16
 80026d4:	481f      	ldr	r0, [pc, #124]	; (8002754 <main+0x298>)
 80026d6:	f7fe fb88 	bl	8000dea <HAL_DAC_SetValue>
  SSD1306_Init ();
 80026da:	f000 f93b 	bl	8002954 <SSD1306_Init>
  InitVypis();
 80026de:	f7ff fe0f 	bl	8002300 <InitVypis>
  HAL_Delay(1000);
 80026e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026e6:	f7fd ff6d 	bl	80005c4 <HAL_Delay>
	  HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R, nula);
 80026ea:	4c1a      	ldr	r4, [pc, #104]	; (8002754 <main+0x298>)
	  if(BPot1==0) break;
 80026ec:	4e22      	ldr	r6, [pc, #136]	; (8002778 <main+0x2bc>)
	  HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R, nula);
 80026ee:	2300      	movs	r3, #0
 80026f0:	4620      	mov	r0, r4
 80026f2:	461a      	mov	r2, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7fe fb78 	bl	8000dea <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac,DAC_CHANNEL_2,DAC_ALIGN_12B_R, nula);
 80026fa:	2300      	movs	r3, #0
 80026fc:	2110      	movs	r1, #16
 80026fe:	461a      	mov	r2, r3
 8002700:	4620      	mov	r0, r4
 8002702:	f7fe fb72 	bl	8000dea <HAL_DAC_SetValue>
	  DMAMeranie();
 8002706:	f7ff fdb9 	bl	800227c <DMAMeranie>
	  BlockVypis();
 800270a:	f7ff fe2f 	bl	800236c <BlockVypis>
	  if(BPot1==0) break;
 800270e:	6833      	ldr	r3, [r6, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ec      	bne.n	80026ee <main+0x232>
	  switch(mode)
 8002714:	782b      	ldrb	r3, [r5, #0]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d8fd      	bhi.n	8002716 <main+0x25a>
 800271a:	e8df f003 	tbb	[pc, r3]
 800271e:	0503      	.short	0x0503
 8002720:	0908      	.short	0x0908
 8002722:	0a          	.byte	0x0a
 8002723:	00          	.byte	0x00
	  	  		  Mode0();
 8002724:	f7ff fe80 	bl	8002428 <Mode0>
			PrimitivneOvladanie();
 8002728:	f7ff fe68 	bl	80023fc <PrimitivneOvladanie>
 800272c:	e7f2      	b.n	8002714 <main+0x258>
 800272e:	e7fe      	b.n	800272e <main+0x272>
 8002730:	e7fe      	b.n	8002730 <main+0x274>
 8002732:	e7fe      	b.n	8002732 <main+0x276>
 8002734:	40021000 	.word	0x40021000
 8002738:	40010800 	.word	0x40010800
 800273c:	40010c00 	.word	0x40010c00
 8002740:	40011000 	.word	0x40011000
 8002744:	2000091c 	.word	0x2000091c
 8002748:	40012400 	.word	0x40012400
 800274c:	200009fc 	.word	0x200009fc
 8002750:	40006400 	.word	0x40006400
 8002754:	20000994 	.word	0x20000994
 8002758:	40007400 	.word	0x40007400
 800275c:	200004c0 	.word	0x200004c0
 8002760:	40005400 	.word	0x40005400
 8002764:	00061a80 	.word	0x00061a80
 8002768:	20000950 	.word	0x20000950
 800276c:	40013800 	.word	0x40013800
 8002770:	2000094c 	.word	0x2000094c
 8002774:	20000518 	.word	0x20000518
 8002778:	20000990 	.word	0x20000990

0800277c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800277c:	e7fe      	b.n	800277c <_Error_Handler>
	...

08002780 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002780:	2800      	cmp	r0, #0
 8002782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002786:	bf14      	ite	ne
 8002788:	21ff      	movne	r1, #255	; 0xff
 800278a:	2100      	moveq	r1, #0
 800278c:	4801      	ldr	r0, [pc, #4]	; (8002794 <SSD1306_Fill+0x14>)
 800278e:	f000 bb20 	b.w	8002dd2 <memset>
 8002792:	bf00      	nop
 8002794:	200000aa 	.word	0x200000aa

08002798 <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8002798:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800279a:	b510      	push	{r4, lr}
	if (
 800279c:	d81a      	bhi.n	80027d4 <SSD1306_DrawPixel+0x3c>
		x >= SSD1306_WIDTH ||
 800279e:	293f      	cmp	r1, #63	; 0x3f
 80027a0:	d818      	bhi.n	80027d4 <SSD1306_DrawPixel+0x3c>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <SSD1306_DrawPixel+0x40>)
 80027a4:	791b      	ldrb	r3, [r3, #4]
 80027a6:	b113      	cbz	r3, 80027ae <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 80027a8:	fab2 f282 	clz	r2, r2
 80027ac:	0952      	lsrs	r2, r2, #5
 80027ae:	08cc      	lsrs	r4, r1, #3
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80027b0:	2a01      	cmp	r2, #1
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <SSD1306_DrawPixel+0x44>)
 80027b4:	f001 0107 	and.w	r1, r1, #7
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027b8:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
	if (color == SSD1306_COLOR_WHITE) {
 80027bc:	d104      	bne.n	80027c8 <SSD1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027be:	408a      	lsls	r2, r1
 80027c0:	5c19      	ldrb	r1, [r3, r0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	541a      	strb	r2, [r3, r0]
 80027c6:	bd10      	pop	{r4, pc}
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80027c8:	2201      	movs	r2, #1
 80027ca:	408a      	lsls	r2, r1
 80027cc:	5c19      	ldrb	r1, [r3, r0]
 80027ce:	ea21 0102 	bic.w	r1, r1, r2
 80027d2:	5419      	strb	r1, [r3, r0]
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	bf00      	nop
 80027d8:	200000a4 	.word	0x200000a4
 80027dc:	200000aa 	.word	0x200000aa

080027e0 <SSD1306_GotoXY>:
	}
}

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80027e0:	4b01      	ldr	r3, [pc, #4]	; (80027e8 <SSD1306_GotoXY+0x8>)
 80027e2:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80027e4:	8059      	strh	r1, [r3, #2]
 80027e6:	4770      	bx	lr
 80027e8:	200000a4 	.word	0x200000a4

080027ec <SSD1306_Putc>:
}

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80027f0:	4d23      	ldr	r5, [pc, #140]	; (8002880 <SSD1306_Putc+0x94>)
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027f2:	4693      	mov	fp, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80027f4:	882e      	ldrh	r6, [r5, #0]
 80027f6:	780a      	ldrb	r2, [r1, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027f8:	b085      	sub	sp, #20
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80027fa:	4432      	add	r2, r6
	if (
 80027fc:	2a7f      	cmp	r2, #127	; 0x7f
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027fe:	4682      	mov	sl, r0
 8002800:	460c      	mov	r4, r1
	if (
 8002802:	dc39      	bgt.n	8002878 <SSD1306_Putc+0x8c>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002804:	886b      	ldrh	r3, [r5, #2]
 8002806:	784a      	ldrb	r2, [r1, #1]
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	441a      	add	r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800280c:	2a3f      	cmp	r2, #63	; 0x3f
 800280e:	dc33      	bgt.n	8002878 <SSD1306_Putc+0x8c>
 8002810:	2700      	movs	r7, #0
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002812:	f1a0 0320 	sub.w	r3, r0, #32
 8002816:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 8002818:	7862      	ldrb	r2, [r4, #1]
 800281a:	4297      	cmp	r7, r2
 800281c:	d306      	bcc.n	800282c <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800281e:	7822      	ldrb	r2, [r4, #0]
 8002820:	4416      	add	r6, r2
 8002822:	802e      	strh	r6, [r5, #0]
	
	/* Return character written */
	return ch;
}
 8002824:	4650      	mov	r0, sl
 8002826:	b005      	add	sp, #20
 8002828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font->FontWidth; j++) {
 800282c:	f04f 0800 	mov.w	r8, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002830:	9b03      	ldr	r3, [sp, #12]
 8002832:	6861      	ldr	r1, [r4, #4]
 8002834:	fb02 7203 	mla	r2, r2, r3, r7
 8002838:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	9b01      	ldr	r3, [sp, #4]
 8002840:	eb03 0907 	add.w	r9, r3, r7
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002844:	fa1f f989 	uxth.w	r9, r9
		for (j = 0; j < Font->FontWidth; j++) {
 8002848:	7822      	ldrb	r2, [r4, #0]
 800284a:	4590      	cmp	r8, r2
 800284c:	d301      	bcc.n	8002852 <SSD1306_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 800284e:	3701      	adds	r7, #1
 8002850:	e7e2      	b.n	8002818 <SSD1306_Putc+0x2c>
			if ((b << j) & 0x8000) {
 8002852:	9b02      	ldr	r3, [sp, #8]
 8002854:	eb06 0008 	add.w	r0, r6, r8
 8002858:	fa03 f208 	lsl.w	r2, r3, r8
 800285c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002860:	bf0a      	itet	eq
 8002862:	fabb f28b 	clzeq	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002866:	465a      	movne	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002868:	0952      	lsreq	r2, r2, #5
 800286a:	4649      	mov	r1, r9
 800286c:	b280      	uxth	r0, r0
 800286e:	f7ff ff93 	bl	8002798 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002872:	f108 0801 	add.w	r8, r8, #1
 8002876:	e7e7      	b.n	8002848 <SSD1306_Putc+0x5c>
		return 0;
 8002878:	f04f 0a00 	mov.w	sl, #0
 800287c:	e7d2      	b.n	8002824 <SSD1306_Putc+0x38>
 800287e:	bf00      	nop
 8002880:	200000a4 	.word	0x200000a4

08002884 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002884:	b570      	push	{r4, r5, r6, lr}
 8002886:	460d      	mov	r5, r1
 8002888:	4616      	mov	r6, r2
 800288a:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 800288c:	7863      	ldrb	r3, [r4, #1]
 800288e:	b143      	cbz	r3, 80028a2 <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002890:	4618      	mov	r0, r3
 8002892:	4632      	mov	r2, r6
 8002894:	4629      	mov	r1, r5
 8002896:	f7ff ffa9 	bl	80027ec <SSD1306_Putc>
 800289a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800289e:	4298      	cmp	r0, r3
 80028a0:	d0f4      	beq.n	800288c <SSD1306_Puts+0x8>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080028a8 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
	uint8_t dt[count + 1];
 80028aa:	f103 0408 	add.w	r4, r3, #8
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80028ae:	b082      	sub	sp, #8
	uint8_t dt[count + 1];
 80028b0:	f024 0407 	bic.w	r4, r4, #7
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80028b4:	af02      	add	r7, sp, #8
	uint8_t dt[count + 1];
 80028b6:	ebad 0d04 	sub.w	sp, sp, r4
	dt[0] = reg;
 80028ba:	f88d 1008 	strb.w	r1, [sp, #8]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80028be:	2101      	movs	r1, #1
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80028c0:	4615      	mov	r5, r2
	uint8_t dt[count + 1];
 80028c2:	aa02      	add	r2, sp, #8
	for(i = 1; i <= count; i++)
 80028c4:	428b      	cmp	r3, r1
 80028c6:	d207      	bcs.n	80028d8 <ssd1306_I2C_WriteMulti+0x30>
		dt[i] = data[i-1];
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 80028c8:	210a      	movs	r1, #10
 80028ca:	9100      	str	r1, [sp, #0]
 80028cc:	4601      	mov	r1, r0
 80028ce:	4806      	ldr	r0, [pc, #24]	; (80028e8 <ssd1306_I2C_WriteMulti+0x40>)
 80028d0:	f7fe fe30 	bl	8001534 <HAL_I2C_Master_Transmit>
}
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bdb0      	pop	{r4, r5, r7, pc}
		dt[i] = data[i-1];
 80028d8:	186c      	adds	r4, r5, r1
 80028da:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 80028de:	5454      	strb	r4, [r2, r1]
	for(i = 1; i <= count; i++)
 80028e0:	3101      	adds	r1, #1
 80028e2:	b2c9      	uxtb	r1, r1
 80028e4:	e7ee      	b.n	80028c4 <ssd1306_I2C_WriteMulti+0x1c>
 80028e6:	bf00      	nop
 80028e8:	200004c0 	.word	0x200004c0

080028ec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80028ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80028ee:	230a      	movs	r3, #10
	dt[0] = reg;
 80028f0:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80028f4:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	4601      	mov	r1, r0
 80028fc:	2302      	movs	r3, #2
 80028fe:	aa03      	add	r2, sp, #12
 8002900:	4802      	ldr	r0, [pc, #8]	; (800290c <ssd1306_I2C_Write+0x20>)
 8002902:	f7fe fe17 	bl	8001534 <HAL_I2C_Master_Transmit>
}
 8002906:	b005      	add	sp, #20
 8002908:	f85d fb04 	ldr.w	pc, [sp], #4
 800290c:	200004c0 	.word	0x200004c0

08002910 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	2400      	movs	r4, #0
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002914:	4d0e      	ldr	r5, [pc, #56]	; (8002950 <SSD1306_UpdateScreen+0x40>)
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002916:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	2100      	movs	r1, #0
 800291e:	2078      	movs	r0, #120	; 0x78
 8002920:	f7ff ffe4 	bl	80028ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002924:	2200      	movs	r2, #0
 8002926:	2078      	movs	r0, #120	; 0x78
 8002928:	4611      	mov	r1, r2
 800292a:	f7ff ffdf 	bl	80028ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800292e:	2210      	movs	r2, #16
 8002930:	2100      	movs	r1, #0
 8002932:	2078      	movs	r0, #120	; 0x78
 8002934:	f7ff ffda 	bl	80028ec <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002938:	eb05 12c4 	add.w	r2, r5, r4, lsl #7
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	2140      	movs	r1, #64	; 0x40
 8002940:	2078      	movs	r0, #120	; 0x78
 8002942:	3401      	adds	r4, #1
 8002944:	f7ff ffb0 	bl	80028a8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002948:	2c08      	cmp	r4, #8
 800294a:	d1e4      	bne.n	8002916 <SSD1306_UpdateScreen+0x6>
}
 800294c:	bd38      	pop	{r3, r4, r5, pc}
 800294e:	bf00      	nop
 8002950:	200000aa 	.word	0x200000aa

08002954 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8002954:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002956:	f644 6320 	movw	r3, #20000	; 0x4e20
 800295a:	2201      	movs	r2, #1
 800295c:	2178      	movs	r1, #120	; 0x78
 800295e:	4850      	ldr	r0, [pc, #320]	; (8002aa0 <SSD1306_Init+0x14c>)
 8002960:	f7fe febe 	bl	80016e0 <HAL_I2C_IsDeviceReady>
 8002964:	4604      	mov	r4, r0
 8002966:	2800      	cmp	r0, #0
 8002968:	f040 8097 	bne.w	8002a9a <SSD1306_Init+0x146>
	SSD1306_WRITECOMMAND(0xAE); //display off
 800296c:	4601      	mov	r1, r0
 800296e:	22ae      	movs	r2, #174	; 0xae
 8002970:	2078      	movs	r0, #120	; 0x78
 8002972:	f7ff ffbb 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002976:	4621      	mov	r1, r4
 8002978:	2220      	movs	r2, #32
 800297a:	2078      	movs	r0, #120	; 0x78
 800297c:	f7ff ffb6 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002980:	4621      	mov	r1, r4
 8002982:	2210      	movs	r2, #16
 8002984:	2078      	movs	r0, #120	; 0x78
 8002986:	f7ff ffb1 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800298a:	4621      	mov	r1, r4
 800298c:	22b0      	movs	r2, #176	; 0xb0
 800298e:	2078      	movs	r0, #120	; 0x78
 8002990:	f7ff ffac 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002994:	4621      	mov	r1, r4
 8002996:	22c8      	movs	r2, #200	; 0xc8
 8002998:	2078      	movs	r0, #120	; 0x78
 800299a:	f7ff ffa7 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800299e:	4622      	mov	r2, r4
 80029a0:	4621      	mov	r1, r4
 80029a2:	2078      	movs	r0, #120	; 0x78
 80029a4:	f7ff ffa2 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80029a8:	4621      	mov	r1, r4
 80029aa:	2210      	movs	r2, #16
 80029ac:	2078      	movs	r0, #120	; 0x78
 80029ae:	f7ff ff9d 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80029b2:	4621      	mov	r1, r4
 80029b4:	2240      	movs	r2, #64	; 0x40
 80029b6:	2078      	movs	r0, #120	; 0x78
 80029b8:	f7ff ff98 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80029bc:	4621      	mov	r1, r4
 80029be:	2281      	movs	r2, #129	; 0x81
 80029c0:	2078      	movs	r0, #120	; 0x78
 80029c2:	f7ff ff93 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80029c6:	4621      	mov	r1, r4
 80029c8:	22ff      	movs	r2, #255	; 0xff
 80029ca:	2078      	movs	r0, #120	; 0x78
 80029cc:	f7ff ff8e 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80029d0:	4621      	mov	r1, r4
 80029d2:	22a1      	movs	r2, #161	; 0xa1
 80029d4:	2078      	movs	r0, #120	; 0x78
 80029d6:	f7ff ff89 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80029da:	4621      	mov	r1, r4
 80029dc:	22a6      	movs	r2, #166	; 0xa6
 80029de:	2078      	movs	r0, #120	; 0x78
 80029e0:	f7ff ff84 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80029e4:	4621      	mov	r1, r4
 80029e6:	22a8      	movs	r2, #168	; 0xa8
 80029e8:	2078      	movs	r0, #120	; 0x78
 80029ea:	f7ff ff7f 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80029ee:	4621      	mov	r1, r4
 80029f0:	223f      	movs	r2, #63	; 0x3f
 80029f2:	2078      	movs	r0, #120	; 0x78
 80029f4:	f7ff ff7a 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80029f8:	4621      	mov	r1, r4
 80029fa:	22a4      	movs	r2, #164	; 0xa4
 80029fc:	2078      	movs	r0, #120	; 0x78
 80029fe:	f7ff ff75 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002a02:	4621      	mov	r1, r4
 8002a04:	22d3      	movs	r2, #211	; 0xd3
 8002a06:	2078      	movs	r0, #120	; 0x78
 8002a08:	f7ff ff70 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002a0c:	4622      	mov	r2, r4
 8002a0e:	4621      	mov	r1, r4
 8002a10:	2078      	movs	r0, #120	; 0x78
 8002a12:	f7ff ff6b 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a16:	4621      	mov	r1, r4
 8002a18:	22d5      	movs	r2, #213	; 0xd5
 8002a1a:	2078      	movs	r0, #120	; 0x78
 8002a1c:	f7ff ff66 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002a20:	4621      	mov	r1, r4
 8002a22:	22f0      	movs	r2, #240	; 0xf0
 8002a24:	2078      	movs	r0, #120	; 0x78
 8002a26:	f7ff ff61 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	22d9      	movs	r2, #217	; 0xd9
 8002a2e:	2078      	movs	r0, #120	; 0x78
 8002a30:	f7ff ff5c 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002a34:	4621      	mov	r1, r4
 8002a36:	2222      	movs	r2, #34	; 0x22
 8002a38:	2078      	movs	r0, #120	; 0x78
 8002a3a:	f7ff ff57 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002a3e:	4621      	mov	r1, r4
 8002a40:	22da      	movs	r2, #218	; 0xda
 8002a42:	2078      	movs	r0, #120	; 0x78
 8002a44:	f7ff ff52 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002a48:	4621      	mov	r1, r4
 8002a4a:	2212      	movs	r2, #18
 8002a4c:	2078      	movs	r0, #120	; 0x78
 8002a4e:	f7ff ff4d 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002a52:	4621      	mov	r1, r4
 8002a54:	22db      	movs	r2, #219	; 0xdb
 8002a56:	2078      	movs	r0, #120	; 0x78
 8002a58:	f7ff ff48 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	2220      	movs	r2, #32
 8002a60:	2078      	movs	r0, #120	; 0x78
 8002a62:	f7ff ff43 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002a66:	4621      	mov	r1, r4
 8002a68:	228d      	movs	r2, #141	; 0x8d
 8002a6a:	2078      	movs	r0, #120	; 0x78
 8002a6c:	f7ff ff3e 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002a70:	4621      	mov	r1, r4
 8002a72:	2214      	movs	r2, #20
 8002a74:	2078      	movs	r0, #120	; 0x78
 8002a76:	f7ff ff39 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002a7a:	22af      	movs	r2, #175	; 0xaf
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	2078      	movs	r0, #120	; 0x78
 8002a80:	f7ff ff34 	bl	80028ec <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff fe7b 	bl	8002780 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002a8a:	f7ff ff41 	bl	8002910 <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8002a8e:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <SSD1306_Init+0x150>)
	SSD1306.Initialized = 1;
 8002a92:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8002a94:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8002a96:	805c      	strh	r4, [r3, #2]
	return 1;
 8002a98:	bd10      	pop	{r4, pc}
		return 0;
 8002a9a:	2000      	movs	r0, #0
}
 8002a9c:	bd10      	pop	{r4, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200004c0 	.word	0x200004c0
 8002aa4:	200000a4 	.word	0x200000a4

08002aa8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002aa8:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_MspInit+0x84>)
{
 8002aaa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002aac:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aae:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	619a      	str	r2, [r3, #24]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac0:	f7fe f8c0 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f06f 000b 	mvn.w	r0, #11
 8002aca:	4611      	mov	r1, r2
 8002acc:	f7fe f8cc 	bl	8000c68 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f06f 000a 	mvn.w	r0, #10
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	f7fe f8c6 	bl	8000c68 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002adc:	2200      	movs	r2, #0
 8002ade:	f06f 0009 	mvn.w	r0, #9
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	f7fe f8c0 	bl	8000c68 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f06f 0004 	mvn.w	r0, #4
 8002aee:	4611      	mov	r1, r2
 8002af0:	f7fe f8ba 	bl	8000c68 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	f06f 0003 	mvn.w	r0, #3
 8002afa:	4611      	mov	r1, r2
 8002afc:	f7fe f8b4 	bl	8000c68 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002b00:	2200      	movs	r2, #0
 8002b02:	f06f 0001 	mvn.w	r0, #1
 8002b06:	4611      	mov	r1, r2
 8002b08:	f7fe f8ae 	bl	8000c68 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b12:	4611      	mov	r1, r2
 8002b14:	f7fe f8a8 	bl	8000c68 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b18:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <HAL_MspInit+0x88>)
 8002b1a:	6853      	ldr	r3, [r2, #4]
 8002b1c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b26:	b003      	add	sp, #12
 8002b28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40010000 	.word	0x40010000

08002b34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b34:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002b36:	6802      	ldr	r2, [r0, #0]
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_ADC_MspInit+0x80>)
{
 8002b3a:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 8002b3c:	429a      	cmp	r2, r3
{
 8002b3e:	4605      	mov	r5, r0
  if(hadc->Instance==ADC1)
 8002b40:	d135      	bne.n	8002bae <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b42:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002b46:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b48:	481b      	ldr	r0, [pc, #108]	; (8002bb8 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4e:	619a      	str	r2, [r3, #24]
 8002b50:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002b5c:	230f      	movs	r3, #15
 8002b5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b60:	2303      	movs	r3, #3
 8002b62:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f7fe fab2 	bl	80010cc <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b68:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8002b6a:	4c14      	ldr	r4, [pc, #80]	; (8002bbc <HAL_ADC_MspInit+0x88>)
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_ADC_MspInit+0x8c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b6e:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b74:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 8002b7a:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b7c:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7e:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b80:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b82:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b84:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b86:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b88:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b8a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b8c:	f7fe f940 	bl	8000e10 <HAL_DMA_Init>
 8002b90:	b118      	cbz	r0, 8002b9a <HAL_ADC_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002b92:	2178      	movs	r1, #120	; 0x78
 8002b94:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <HAL_ADC_MspInit+0x90>)
 8002b96:	f7ff fdf1 	bl	800277c <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b9c:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002b9e:	2012      	movs	r0, #18
 8002ba0:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ba2:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002ba4:	f7fe f860 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002ba8:	2012      	movs	r0, #18
 8002baa:	f7fe f891 	bl	8000cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bae:	b007      	add	sp, #28
 8002bb0:	bd30      	pop	{r4, r5, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40012400 	.word	0x40012400
 8002bb8:	40010800 	.word	0x40010800
 8002bbc:	200009a8 	.word	0x200009a8
 8002bc0:	40020008 	.word	0x40020008
 8002bc4:	08005efe 	.word	0x08005efe

08002bc8 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002bc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8002bca:	6802      	ldr	r2, [r0, #0]
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_CAN_MspInit+0x50>)
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d11f      	bne.n	8002c12 <HAL_CAN_MspInit+0x4a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002bd2:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002bd6:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002bda:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002bde:	61da      	str	r2, [r3, #28]
 8002be0:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be2:	480e      	ldr	r0, [pc, #56]	; (8002c1c <HAL_CAN_MspInit+0x54>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002bec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bf0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf8:	f7fe fa68 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c00:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c06:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c08:	a902      	add	r1, sp, #8
 8002c0a:	4804      	ldr	r0, [pc, #16]	; (8002c1c <HAL_CAN_MspInit+0x54>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c0c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f7fe fa5d 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002c12:	b007      	add	sp, #28
 8002c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c18:	40006400 	.word	0x40006400
 8002c1c:	40010800 	.word	0x40010800

08002c20 <HAL_DAC_MspInit>:
  }

}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002c20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC)
 8002c22:	6802      	ldr	r2, [r0, #0]
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_DAC_MspInit+0x38>)
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d112      	bne.n	8002c50 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c2a:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
 8002c2e:	69da      	ldr	r2, [r3, #28]
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c32:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c36:	61da      	str	r2, [r3, #28]
 8002c38:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3a:	4808      	ldr	r0, [pc, #32]	; (8002c5c <HAL_DAC_MspInit+0x3c>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002c44:	2330      	movs	r3, #48	; 0x30
 8002c46:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4c:	f7fe fa3e 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002c50:	b007      	add	sp, #28
 8002c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c56:	bf00      	nop
 8002c58:	40007400 	.word	0x40007400
 8002c5c:	40010800 	.word	0x40010800

08002c60 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002c62:	6802      	ldr	r2, [r0, #0]
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_I2C_MspInit+0x38>)
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d113      	bne.n	8002c92 <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c6a:	23c0      	movs	r3, #192	; 0xc0
 8002c6c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c6e:	2312      	movs	r3, #18
 8002c70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c72:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c74:	a902      	add	r1, sp, #8
 8002c76:	4809      	ldr	r0, [pc, #36]	; (8002c9c <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c78:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7a:	f7fe fa27 	bl	80010cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_I2C_MspInit+0x40>)
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c86:	61da      	str	r2, [r3, #28]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c92:	b007      	add	sp, #28
 8002c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c98:	40005400 	.word	0x40005400
 8002c9c:	40010c00 	.word	0x40010c00
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002ca6:	6802      	ldr	r2, [r0, #0]
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_UART_MspInit+0x50>)
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d11f      	bne.n	8002cee <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cae:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002cb2:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cba:	619a      	str	r2, [r3, #24]
 8002cbc:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbe:	480e      	ldr	r0, [pc, #56]	; (8002cf8 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ccc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd6:	f7fe f9f9 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cde:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce0:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	a902      	add	r1, sp, #8
 8002ce4:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cea:	f7fe f9ef 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cee:	b007      	add	sp, #28
 8002cf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	40010800 	.word	0x40010800

08002cfc <NMI_Handler>:
 8002cfc:	4770      	bx	lr

08002cfe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002cfe:	e7fe      	b.n	8002cfe <HardFault_Handler>

08002d00 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002d00:	e7fe      	b.n	8002d00 <MemManage_Handler>

08002d02 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002d02:	e7fe      	b.n	8002d02 <BusFault_Handler>

08002d04 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002d04:	e7fe      	b.n	8002d04 <UsageFault_Handler>

08002d06 <SVC_Handler>:
 8002d06:	4770      	bx	lr

08002d08 <DebugMon_Handler>:
 8002d08:	4770      	bx	lr

08002d0a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002d0a:	4770      	bx	lr

08002d0c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d0e:	f7fd fc47 	bl	80005a0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002d16:	f7fe b80a 	b.w	8000d2e <HAL_SYSTICK_IRQHandler>
	...

08002d1c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d1c:	4801      	ldr	r0, [pc, #4]	; (8002d24 <DMA1_Channel1_IRQHandler+0x8>)
 8002d1e:	f7fe b8f9 	b.w	8000f14 <HAL_DMA_IRQHandler>
 8002d22:	bf00      	nop
 8002d24:	200009a8 	.word	0x200009a8

08002d28 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d28:	4801      	ldr	r0, [pc, #4]	; (8002d30 <ADC1_2_IRQHandler+0x8>)
 8002d2a:	f7fd bc8c 	b.w	8000646 <HAL_ADC_IRQHandler>
 8002d2e:	bf00      	nop
 8002d30:	2000091c 	.word	0x2000091c

08002d34 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <SystemInit+0x4c>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <SystemInit+0x50>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d50:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d58:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002d60:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8002d68:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8002d6a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8002d6e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8002d70:	2200      	movs	r2, #0
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <SystemInit+0x54>)
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	f0ff0000 	.word	0xf0ff0000
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d8e:	e003      	b.n	8002d98 <LoopCopyDataInit>

08002d90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d90:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8002d92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d96:	3104      	adds	r1, #4

08002d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d98:	4809      	ldr	r0, [pc, #36]	; (8002dc0 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8002d9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002da0:	d3f6      	bcc.n	8002d90 <CopyDataInit>
  ldr r2, =_sbss
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8002da4:	e002      	b.n	8002dac <LoopFillZerobss>

08002da6 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002da8:	f842 3b04 	str.w	r3, [r2], #4

08002dac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <LoopFillZerobss+0x20>)
  cmp r2, r3
 8002dae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002db0:	d3f9      	bcc.n	8002da6 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002db2:	f7ff ffbf 	bl	8002d34 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8002db6:	f7ff fb81 	bl	80024bc <main>
  bx lr
 8002dba:	4770      	bx	lr
  ldr r3, =_sidata
 8002dbc:	08005f74 	.word	0x08005f74
  ldr r0, =_sdata
 8002dc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002dc4:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8002dc8:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8002dcc:	20000a54 	.word	0x20000a54

08002dd0 <CAN1_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dd0:	e7fe      	b.n	8002dd0 <CAN1_RX0_IRQHandler>

08002dd2 <memset>:
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4402      	add	r2, r0
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d100      	bne.n	8002ddc <memset+0xa>
 8002dda:	4770      	bx	lr
 8002ddc:	f803 1b01 	strb.w	r1, [r3], #1
 8002de0:	e7f9      	b.n	8002dd6 <memset+0x4>
	...

08002de4 <siprintf>:
 8002de4:	b40e      	push	{r1, r2, r3}
 8002de6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002dea:	b500      	push	{lr}
 8002dec:	b09c      	sub	sp, #112	; 0x70
 8002dee:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002df2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002df6:	9104      	str	r1, [sp, #16]
 8002df8:	9107      	str	r1, [sp, #28]
 8002dfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8002e00:	9002      	str	r0, [sp, #8]
 8002e02:	9006      	str	r0, [sp, #24]
 8002e04:	4808      	ldr	r0, [pc, #32]	; (8002e28 <siprintf+0x44>)
 8002e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e0a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002e0e:	6800      	ldr	r0, [r0, #0]
 8002e10:	a902      	add	r1, sp, #8
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	f000 f866 	bl	8002ee4 <_svfiprintf_r>
 8002e18:	2200      	movs	r2, #0
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	b01c      	add	sp, #112	; 0x70
 8002e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e24:	b003      	add	sp, #12
 8002e26:	4770      	bx	lr
 8002e28:	20000024 	.word	0x20000024

08002e2c <__ssputs_r>:
 8002e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e30:	688e      	ldr	r6, [r1, #8]
 8002e32:	4682      	mov	sl, r0
 8002e34:	429e      	cmp	r6, r3
 8002e36:	460c      	mov	r4, r1
 8002e38:	4691      	mov	r9, r2
 8002e3a:	4698      	mov	r8, r3
 8002e3c:	d835      	bhi.n	8002eaa <__ssputs_r+0x7e>
 8002e3e:	898a      	ldrh	r2, [r1, #12]
 8002e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e44:	d031      	beq.n	8002eaa <__ssputs_r+0x7e>
 8002e46:	2302      	movs	r3, #2
 8002e48:	6825      	ldr	r5, [r4, #0]
 8002e4a:	6909      	ldr	r1, [r1, #16]
 8002e4c:	1a6f      	subs	r7, r5, r1
 8002e4e:	6965      	ldr	r5, [r4, #20]
 8002e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e54:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e58:	f108 0301 	add.w	r3, r8, #1
 8002e5c:	443b      	add	r3, r7
 8002e5e:	429d      	cmp	r5, r3
 8002e60:	bf38      	it	cc
 8002e62:	461d      	movcc	r5, r3
 8002e64:	0553      	lsls	r3, r2, #21
 8002e66:	d531      	bpl.n	8002ecc <__ssputs_r+0xa0>
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f000 fb47 	bl	80034fc <_malloc_r>
 8002e6e:	4606      	mov	r6, r0
 8002e70:	b950      	cbnz	r0, 8002e88 <__ssputs_r+0x5c>
 8002e72:	230c      	movs	r3, #12
 8002e74:	f8ca 3000 	str.w	r3, [sl]
 8002e78:	89a3      	ldrh	r3, [r4, #12]
 8002e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e82:	81a3      	strh	r3, [r4, #12]
 8002e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e88:	463a      	mov	r2, r7
 8002e8a:	6921      	ldr	r1, [r4, #16]
 8002e8c:	f000 fac4 	bl	8003418 <memcpy>
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9a:	81a3      	strh	r3, [r4, #12]
 8002e9c:	6126      	str	r6, [r4, #16]
 8002e9e:	443e      	add	r6, r7
 8002ea0:	6026      	str	r6, [r4, #0]
 8002ea2:	4646      	mov	r6, r8
 8002ea4:	6165      	str	r5, [r4, #20]
 8002ea6:	1bed      	subs	r5, r5, r7
 8002ea8:	60a5      	str	r5, [r4, #8]
 8002eaa:	4546      	cmp	r6, r8
 8002eac:	bf28      	it	cs
 8002eae:	4646      	movcs	r6, r8
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	4632      	mov	r2, r6
 8002eb4:	6820      	ldr	r0, [r4, #0]
 8002eb6:	f000 faba 	bl	800342e <memmove>
 8002eba:	68a3      	ldr	r3, [r4, #8]
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	1b9b      	subs	r3, r3, r6
 8002ec0:	60a3      	str	r3, [r4, #8]
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	441e      	add	r6, r3
 8002ec6:	6026      	str	r6, [r4, #0]
 8002ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ecc:	462a      	mov	r2, r5
 8002ece:	f000 fb73 	bl	80035b8 <_realloc_r>
 8002ed2:	4606      	mov	r6, r0
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d1e1      	bne.n	8002e9c <__ssputs_r+0x70>
 8002ed8:	6921      	ldr	r1, [r4, #16]
 8002eda:	4650      	mov	r0, sl
 8002edc:	f000 fac2 	bl	8003464 <_free_r>
 8002ee0:	e7c7      	b.n	8002e72 <__ssputs_r+0x46>
	...

08002ee4 <_svfiprintf_r>:
 8002ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee8:	b09d      	sub	sp, #116	; 0x74
 8002eea:	9303      	str	r3, [sp, #12]
 8002eec:	898b      	ldrh	r3, [r1, #12]
 8002eee:	4680      	mov	r8, r0
 8002ef0:	061c      	lsls	r4, r3, #24
 8002ef2:	460d      	mov	r5, r1
 8002ef4:	4616      	mov	r6, r2
 8002ef6:	d50f      	bpl.n	8002f18 <_svfiprintf_r+0x34>
 8002ef8:	690b      	ldr	r3, [r1, #16]
 8002efa:	b96b      	cbnz	r3, 8002f18 <_svfiprintf_r+0x34>
 8002efc:	2140      	movs	r1, #64	; 0x40
 8002efe:	f000 fafd 	bl	80034fc <_malloc_r>
 8002f02:	6028      	str	r0, [r5, #0]
 8002f04:	6128      	str	r0, [r5, #16]
 8002f06:	b928      	cbnz	r0, 8002f14 <_svfiprintf_r+0x30>
 8002f08:	230c      	movs	r3, #12
 8002f0a:	f8c8 3000 	str.w	r3, [r8]
 8002f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f12:	e0c4      	b.n	800309e <_svfiprintf_r+0x1ba>
 8002f14:	2340      	movs	r3, #64	; 0x40
 8002f16:	616b      	str	r3, [r5, #20]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f22:	2330      	movs	r3, #48	; 0x30
 8002f24:	f04f 0b01 	mov.w	fp, #1
 8002f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f2c:	4637      	mov	r7, r6
 8002f2e:	463c      	mov	r4, r7
 8002f30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d13c      	bne.n	8002fb2 <_svfiprintf_r+0xce>
 8002f38:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f3c:	d00b      	beq.n	8002f56 <_svfiprintf_r+0x72>
 8002f3e:	4653      	mov	r3, sl
 8002f40:	4632      	mov	r2, r6
 8002f42:	4629      	mov	r1, r5
 8002f44:	4640      	mov	r0, r8
 8002f46:	f7ff ff71 	bl	8002e2c <__ssputs_r>
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	f000 80a2 	beq.w	8003094 <_svfiprintf_r+0x1b0>
 8002f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f52:	4453      	add	r3, sl
 8002f54:	9309      	str	r3, [sp, #36]	; 0x24
 8002f56:	783b      	ldrb	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 809b 	beq.w	8003094 <_svfiprintf_r+0x1b0>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	9304      	str	r3, [sp, #16]
 8002f66:	9307      	str	r3, [sp, #28]
 8002f68:	9205      	str	r2, [sp, #20]
 8002f6a:	9306      	str	r3, [sp, #24]
 8002f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f70:	931a      	str	r3, [sp, #104]	; 0x68
 8002f72:	2205      	movs	r2, #5
 8002f74:	7821      	ldrb	r1, [r4, #0]
 8002f76:	4850      	ldr	r0, [pc, #320]	; (80030b8 <_svfiprintf_r+0x1d4>)
 8002f78:	f000 fa40 	bl	80033fc <memchr>
 8002f7c:	1c67      	adds	r7, r4, #1
 8002f7e:	9b04      	ldr	r3, [sp, #16]
 8002f80:	b9d8      	cbnz	r0, 8002fba <_svfiprintf_r+0xd6>
 8002f82:	06d9      	lsls	r1, r3, #27
 8002f84:	bf44      	itt	mi
 8002f86:	2220      	movmi	r2, #32
 8002f88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f8c:	071a      	lsls	r2, r3, #28
 8002f8e:	bf44      	itt	mi
 8002f90:	222b      	movmi	r2, #43	; 0x2b
 8002f92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f96:	7822      	ldrb	r2, [r4, #0]
 8002f98:	2a2a      	cmp	r2, #42	; 0x2a
 8002f9a:	d016      	beq.n	8002fca <_svfiprintf_r+0xe6>
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	200a      	movs	r0, #10
 8002fa0:	9a07      	ldr	r2, [sp, #28]
 8002fa2:	4627      	mov	r7, r4
 8002fa4:	783b      	ldrb	r3, [r7, #0]
 8002fa6:	3401      	adds	r4, #1
 8002fa8:	3b30      	subs	r3, #48	; 0x30
 8002faa:	2b09      	cmp	r3, #9
 8002fac:	d950      	bls.n	8003050 <_svfiprintf_r+0x16c>
 8002fae:	b1c9      	cbz	r1, 8002fe4 <_svfiprintf_r+0x100>
 8002fb0:	e011      	b.n	8002fd6 <_svfiprintf_r+0xf2>
 8002fb2:	2b25      	cmp	r3, #37	; 0x25
 8002fb4:	d0c0      	beq.n	8002f38 <_svfiprintf_r+0x54>
 8002fb6:	4627      	mov	r7, r4
 8002fb8:	e7b9      	b.n	8002f2e <_svfiprintf_r+0x4a>
 8002fba:	4a3f      	ldr	r2, [pc, #252]	; (80030b8 <_svfiprintf_r+0x1d4>)
 8002fbc:	463c      	mov	r4, r7
 8002fbe:	1a80      	subs	r0, r0, r2
 8002fc0:	fa0b f000 	lsl.w	r0, fp, r0
 8002fc4:	4318      	orrs	r0, r3
 8002fc6:	9004      	str	r0, [sp, #16]
 8002fc8:	e7d3      	b.n	8002f72 <_svfiprintf_r+0x8e>
 8002fca:	9a03      	ldr	r2, [sp, #12]
 8002fcc:	1d11      	adds	r1, r2, #4
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	9103      	str	r1, [sp, #12]
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	db01      	blt.n	8002fda <_svfiprintf_r+0xf6>
 8002fd6:	9207      	str	r2, [sp, #28]
 8002fd8:	e004      	b.n	8002fe4 <_svfiprintf_r+0x100>
 8002fda:	4252      	negs	r2, r2
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	9207      	str	r2, [sp, #28]
 8002fe2:	9304      	str	r3, [sp, #16]
 8002fe4:	783b      	ldrb	r3, [r7, #0]
 8002fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8002fe8:	d10d      	bne.n	8003006 <_svfiprintf_r+0x122>
 8002fea:	787b      	ldrb	r3, [r7, #1]
 8002fec:	1c79      	adds	r1, r7, #1
 8002fee:	2b2a      	cmp	r3, #42	; 0x2a
 8002ff0:	d132      	bne.n	8003058 <_svfiprintf_r+0x174>
 8002ff2:	9b03      	ldr	r3, [sp, #12]
 8002ff4:	3702      	adds	r7, #2
 8002ff6:	1d1a      	adds	r2, r3, #4
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	9203      	str	r2, [sp, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bfb8      	it	lt
 8003000:	f04f 33ff 	movlt.w	r3, #4294967295
 8003004:	9305      	str	r3, [sp, #20]
 8003006:	4c2d      	ldr	r4, [pc, #180]	; (80030bc <_svfiprintf_r+0x1d8>)
 8003008:	2203      	movs	r2, #3
 800300a:	7839      	ldrb	r1, [r7, #0]
 800300c:	4620      	mov	r0, r4
 800300e:	f000 f9f5 	bl	80033fc <memchr>
 8003012:	b138      	cbz	r0, 8003024 <_svfiprintf_r+0x140>
 8003014:	2340      	movs	r3, #64	; 0x40
 8003016:	1b00      	subs	r0, r0, r4
 8003018:	fa03 f000 	lsl.w	r0, r3, r0
 800301c:	9b04      	ldr	r3, [sp, #16]
 800301e:	3701      	adds	r7, #1
 8003020:	4303      	orrs	r3, r0
 8003022:	9304      	str	r3, [sp, #16]
 8003024:	7839      	ldrb	r1, [r7, #0]
 8003026:	2206      	movs	r2, #6
 8003028:	4825      	ldr	r0, [pc, #148]	; (80030c0 <_svfiprintf_r+0x1dc>)
 800302a:	1c7e      	adds	r6, r7, #1
 800302c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003030:	f000 f9e4 	bl	80033fc <memchr>
 8003034:	2800      	cmp	r0, #0
 8003036:	d035      	beq.n	80030a4 <_svfiprintf_r+0x1c0>
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <_svfiprintf_r+0x1e0>)
 800303a:	b9fb      	cbnz	r3, 800307c <_svfiprintf_r+0x198>
 800303c:	9b03      	ldr	r3, [sp, #12]
 800303e:	3307      	adds	r3, #7
 8003040:	f023 0307 	bic.w	r3, r3, #7
 8003044:	3308      	adds	r3, #8
 8003046:	9303      	str	r3, [sp, #12]
 8003048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304a:	444b      	add	r3, r9
 800304c:	9309      	str	r3, [sp, #36]	; 0x24
 800304e:	e76d      	b.n	8002f2c <_svfiprintf_r+0x48>
 8003050:	fb00 3202 	mla	r2, r0, r2, r3
 8003054:	2101      	movs	r1, #1
 8003056:	e7a4      	b.n	8002fa2 <_svfiprintf_r+0xbe>
 8003058:	2300      	movs	r3, #0
 800305a:	240a      	movs	r4, #10
 800305c:	4618      	mov	r0, r3
 800305e:	9305      	str	r3, [sp, #20]
 8003060:	460f      	mov	r7, r1
 8003062:	783a      	ldrb	r2, [r7, #0]
 8003064:	3101      	adds	r1, #1
 8003066:	3a30      	subs	r2, #48	; 0x30
 8003068:	2a09      	cmp	r2, #9
 800306a:	d903      	bls.n	8003074 <_svfiprintf_r+0x190>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ca      	beq.n	8003006 <_svfiprintf_r+0x122>
 8003070:	9005      	str	r0, [sp, #20]
 8003072:	e7c8      	b.n	8003006 <_svfiprintf_r+0x122>
 8003074:	fb04 2000 	mla	r0, r4, r0, r2
 8003078:	2301      	movs	r3, #1
 800307a:	e7f1      	b.n	8003060 <_svfiprintf_r+0x17c>
 800307c:	ab03      	add	r3, sp, #12
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	462a      	mov	r2, r5
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <_svfiprintf_r+0x1e4>)
 8003084:	a904      	add	r1, sp, #16
 8003086:	4640      	mov	r0, r8
 8003088:	f3af 8000 	nop.w
 800308c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003090:	4681      	mov	r9, r0
 8003092:	d1d9      	bne.n	8003048 <_svfiprintf_r+0x164>
 8003094:	89ab      	ldrh	r3, [r5, #12]
 8003096:	065b      	lsls	r3, r3, #25
 8003098:	f53f af39 	bmi.w	8002f0e <_svfiprintf_r+0x2a>
 800309c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800309e:	b01d      	add	sp, #116	; 0x74
 80030a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030a4:	ab03      	add	r3, sp, #12
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	462a      	mov	r2, r5
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <_svfiprintf_r+0x1e4>)
 80030ac:	a904      	add	r1, sp, #16
 80030ae:	4640      	mov	r0, r8
 80030b0:	f000 f884 	bl	80031bc <_printf_i>
 80030b4:	e7ea      	b.n	800308c <_svfiprintf_r+0x1a8>
 80030b6:	bf00      	nop
 80030b8:	08005f31 	.word	0x08005f31
 80030bc:	08005f37 	.word	0x08005f37
 80030c0:	08005f3b 	.word	0x08005f3b
 80030c4:	00000000 	.word	0x00000000
 80030c8:	08002e2d 	.word	0x08002e2d

080030cc <_printf_common>:
 80030cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d0:	4691      	mov	r9, r2
 80030d2:	461f      	mov	r7, r3
 80030d4:	688a      	ldr	r2, [r1, #8]
 80030d6:	690b      	ldr	r3, [r1, #16]
 80030d8:	4606      	mov	r6, r0
 80030da:	4293      	cmp	r3, r2
 80030dc:	bfb8      	it	lt
 80030de:	4613      	movlt	r3, r2
 80030e0:	f8c9 3000 	str.w	r3, [r9]
 80030e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030e8:	460c      	mov	r4, r1
 80030ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030ee:	b112      	cbz	r2, 80030f6 <_printf_common+0x2a>
 80030f0:	3301      	adds	r3, #1
 80030f2:	f8c9 3000 	str.w	r3, [r9]
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	0699      	lsls	r1, r3, #26
 80030fa:	bf42      	ittt	mi
 80030fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003100:	3302      	addmi	r3, #2
 8003102:	f8c9 3000 	strmi.w	r3, [r9]
 8003106:	6825      	ldr	r5, [r4, #0]
 8003108:	f015 0506 	ands.w	r5, r5, #6
 800310c:	d107      	bne.n	800311e <_printf_common+0x52>
 800310e:	f104 0a19 	add.w	sl, r4, #25
 8003112:	68e3      	ldr	r3, [r4, #12]
 8003114:	f8d9 2000 	ldr.w	r2, [r9]
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	429d      	cmp	r5, r3
 800311c:	db2a      	blt.n	8003174 <_printf_common+0xa8>
 800311e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	3300      	adds	r3, #0
 8003126:	bf18      	it	ne
 8003128:	2301      	movne	r3, #1
 800312a:	0692      	lsls	r2, r2, #26
 800312c:	d42f      	bmi.n	800318e <_printf_common+0xc2>
 800312e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003132:	4639      	mov	r1, r7
 8003134:	4630      	mov	r0, r6
 8003136:	47c0      	blx	r8
 8003138:	3001      	adds	r0, #1
 800313a:	d022      	beq.n	8003182 <_printf_common+0xb6>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	68e5      	ldr	r5, [r4, #12]
 8003140:	f003 0306 	and.w	r3, r3, #6
 8003144:	2b04      	cmp	r3, #4
 8003146:	bf18      	it	ne
 8003148:	2500      	movne	r5, #0
 800314a:	f8d9 2000 	ldr.w	r2, [r9]
 800314e:	f04f 0900 	mov.w	r9, #0
 8003152:	bf08      	it	eq
 8003154:	1aad      	subeq	r5, r5, r2
 8003156:	68a3      	ldr	r3, [r4, #8]
 8003158:	6922      	ldr	r2, [r4, #16]
 800315a:	bf08      	it	eq
 800315c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003160:	4293      	cmp	r3, r2
 8003162:	bfc4      	itt	gt
 8003164:	1a9b      	subgt	r3, r3, r2
 8003166:	18ed      	addgt	r5, r5, r3
 8003168:	341a      	adds	r4, #26
 800316a:	454d      	cmp	r5, r9
 800316c:	d11b      	bne.n	80031a6 <_printf_common+0xda>
 800316e:	2000      	movs	r0, #0
 8003170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003174:	2301      	movs	r3, #1
 8003176:	4652      	mov	r2, sl
 8003178:	4639      	mov	r1, r7
 800317a:	4630      	mov	r0, r6
 800317c:	47c0      	blx	r8
 800317e:	3001      	adds	r0, #1
 8003180:	d103      	bne.n	800318a <_printf_common+0xbe>
 8003182:	f04f 30ff 	mov.w	r0, #4294967295
 8003186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800318a:	3501      	adds	r5, #1
 800318c:	e7c1      	b.n	8003112 <_printf_common+0x46>
 800318e:	2030      	movs	r0, #48	; 0x30
 8003190:	18e1      	adds	r1, r4, r3
 8003192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800319c:	4422      	add	r2, r4
 800319e:	3302      	adds	r3, #2
 80031a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031a4:	e7c3      	b.n	800312e <_printf_common+0x62>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4622      	mov	r2, r4
 80031aa:	4639      	mov	r1, r7
 80031ac:	4630      	mov	r0, r6
 80031ae:	47c0      	blx	r8
 80031b0:	3001      	adds	r0, #1
 80031b2:	d0e6      	beq.n	8003182 <_printf_common+0xb6>
 80031b4:	f109 0901 	add.w	r9, r9, #1
 80031b8:	e7d7      	b.n	800316a <_printf_common+0x9e>
	...

080031bc <_printf_i>:
 80031bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031c0:	4617      	mov	r7, r2
 80031c2:	7e0a      	ldrb	r2, [r1, #24]
 80031c4:	b085      	sub	sp, #20
 80031c6:	2a6e      	cmp	r2, #110	; 0x6e
 80031c8:	4698      	mov	r8, r3
 80031ca:	4606      	mov	r6, r0
 80031cc:	460c      	mov	r4, r1
 80031ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80031d4:	f000 80bc 	beq.w	8003350 <_printf_i+0x194>
 80031d8:	d81a      	bhi.n	8003210 <_printf_i+0x54>
 80031da:	2a63      	cmp	r2, #99	; 0x63
 80031dc:	d02e      	beq.n	800323c <_printf_i+0x80>
 80031de:	d80a      	bhi.n	80031f6 <_printf_i+0x3a>
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	f000 80c8 	beq.w	8003376 <_printf_i+0x1ba>
 80031e6:	2a58      	cmp	r2, #88	; 0x58
 80031e8:	f000 808a 	beq.w	8003300 <_printf_i+0x144>
 80031ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80031f4:	e02a      	b.n	800324c <_printf_i+0x90>
 80031f6:	2a64      	cmp	r2, #100	; 0x64
 80031f8:	d001      	beq.n	80031fe <_printf_i+0x42>
 80031fa:	2a69      	cmp	r2, #105	; 0x69
 80031fc:	d1f6      	bne.n	80031ec <_printf_i+0x30>
 80031fe:	6821      	ldr	r1, [r4, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003206:	d023      	beq.n	8003250 <_printf_i+0x94>
 8003208:	1d11      	adds	r1, r2, #4
 800320a:	6019      	str	r1, [r3, #0]
 800320c:	6813      	ldr	r3, [r2, #0]
 800320e:	e027      	b.n	8003260 <_printf_i+0xa4>
 8003210:	2a73      	cmp	r2, #115	; 0x73
 8003212:	f000 80b4 	beq.w	800337e <_printf_i+0x1c2>
 8003216:	d808      	bhi.n	800322a <_printf_i+0x6e>
 8003218:	2a6f      	cmp	r2, #111	; 0x6f
 800321a:	d02a      	beq.n	8003272 <_printf_i+0xb6>
 800321c:	2a70      	cmp	r2, #112	; 0x70
 800321e:	d1e5      	bne.n	80031ec <_printf_i+0x30>
 8003220:	680a      	ldr	r2, [r1, #0]
 8003222:	f042 0220 	orr.w	r2, r2, #32
 8003226:	600a      	str	r2, [r1, #0]
 8003228:	e003      	b.n	8003232 <_printf_i+0x76>
 800322a:	2a75      	cmp	r2, #117	; 0x75
 800322c:	d021      	beq.n	8003272 <_printf_i+0xb6>
 800322e:	2a78      	cmp	r2, #120	; 0x78
 8003230:	d1dc      	bne.n	80031ec <_printf_i+0x30>
 8003232:	2278      	movs	r2, #120	; 0x78
 8003234:	496f      	ldr	r1, [pc, #444]	; (80033f4 <_printf_i+0x238>)
 8003236:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800323a:	e064      	b.n	8003306 <_printf_i+0x14a>
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003242:	1d11      	adds	r1, r2, #4
 8003244:	6019      	str	r1, [r3, #0]
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800324c:	2301      	movs	r3, #1
 800324e:	e0a3      	b.n	8003398 <_printf_i+0x1dc>
 8003250:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003254:	f102 0104 	add.w	r1, r2, #4
 8003258:	6019      	str	r1, [r3, #0]
 800325a:	d0d7      	beq.n	800320c <_printf_i+0x50>
 800325c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003260:	2b00      	cmp	r3, #0
 8003262:	da03      	bge.n	800326c <_printf_i+0xb0>
 8003264:	222d      	movs	r2, #45	; 0x2d
 8003266:	425b      	negs	r3, r3
 8003268:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800326c:	4962      	ldr	r1, [pc, #392]	; (80033f8 <_printf_i+0x23c>)
 800326e:	220a      	movs	r2, #10
 8003270:	e017      	b.n	80032a2 <_printf_i+0xe6>
 8003272:	6820      	ldr	r0, [r4, #0]
 8003274:	6819      	ldr	r1, [r3, #0]
 8003276:	f010 0f80 	tst.w	r0, #128	; 0x80
 800327a:	d003      	beq.n	8003284 <_printf_i+0xc8>
 800327c:	1d08      	adds	r0, r1, #4
 800327e:	6018      	str	r0, [r3, #0]
 8003280:	680b      	ldr	r3, [r1, #0]
 8003282:	e006      	b.n	8003292 <_printf_i+0xd6>
 8003284:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003288:	f101 0004 	add.w	r0, r1, #4
 800328c:	6018      	str	r0, [r3, #0]
 800328e:	d0f7      	beq.n	8003280 <_printf_i+0xc4>
 8003290:	880b      	ldrh	r3, [r1, #0]
 8003292:	2a6f      	cmp	r2, #111	; 0x6f
 8003294:	bf14      	ite	ne
 8003296:	220a      	movne	r2, #10
 8003298:	2208      	moveq	r2, #8
 800329a:	4957      	ldr	r1, [pc, #348]	; (80033f8 <_printf_i+0x23c>)
 800329c:	2000      	movs	r0, #0
 800329e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80032a2:	6865      	ldr	r5, [r4, #4]
 80032a4:	2d00      	cmp	r5, #0
 80032a6:	60a5      	str	r5, [r4, #8]
 80032a8:	f2c0 809c 	blt.w	80033e4 <_printf_i+0x228>
 80032ac:	6820      	ldr	r0, [r4, #0]
 80032ae:	f020 0004 	bic.w	r0, r0, #4
 80032b2:	6020      	str	r0, [r4, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d13f      	bne.n	8003338 <_printf_i+0x17c>
 80032b8:	2d00      	cmp	r5, #0
 80032ba:	f040 8095 	bne.w	80033e8 <_printf_i+0x22c>
 80032be:	4675      	mov	r5, lr
 80032c0:	2a08      	cmp	r2, #8
 80032c2:	d10b      	bne.n	80032dc <_printf_i+0x120>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	07da      	lsls	r2, r3, #31
 80032c8:	d508      	bpl.n	80032dc <_printf_i+0x120>
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	6862      	ldr	r2, [r4, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	bfde      	ittt	le
 80032d2:	2330      	movle	r3, #48	; 0x30
 80032d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032dc:	ebae 0305 	sub.w	r3, lr, r5
 80032e0:	6123      	str	r3, [r4, #16]
 80032e2:	f8cd 8000 	str.w	r8, [sp]
 80032e6:	463b      	mov	r3, r7
 80032e8:	aa03      	add	r2, sp, #12
 80032ea:	4621      	mov	r1, r4
 80032ec:	4630      	mov	r0, r6
 80032ee:	f7ff feed 	bl	80030cc <_printf_common>
 80032f2:	3001      	adds	r0, #1
 80032f4:	d155      	bne.n	80033a2 <_printf_i+0x1e6>
 80032f6:	f04f 30ff 	mov.w	r0, #4294967295
 80032fa:	b005      	add	sp, #20
 80032fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003300:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003304:	493c      	ldr	r1, [pc, #240]	; (80033f8 <_printf_i+0x23c>)
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800330e:	f100 0504 	add.w	r5, r0, #4
 8003312:	601d      	str	r5, [r3, #0]
 8003314:	d001      	beq.n	800331a <_printf_i+0x15e>
 8003316:	6803      	ldr	r3, [r0, #0]
 8003318:	e002      	b.n	8003320 <_printf_i+0x164>
 800331a:	0655      	lsls	r5, r2, #25
 800331c:	d5fb      	bpl.n	8003316 <_printf_i+0x15a>
 800331e:	8803      	ldrh	r3, [r0, #0]
 8003320:	07d0      	lsls	r0, r2, #31
 8003322:	bf44      	itt	mi
 8003324:	f042 0220 	orrmi.w	r2, r2, #32
 8003328:	6022      	strmi	r2, [r4, #0]
 800332a:	b91b      	cbnz	r3, 8003334 <_printf_i+0x178>
 800332c:	6822      	ldr	r2, [r4, #0]
 800332e:	f022 0220 	bic.w	r2, r2, #32
 8003332:	6022      	str	r2, [r4, #0]
 8003334:	2210      	movs	r2, #16
 8003336:	e7b1      	b.n	800329c <_printf_i+0xe0>
 8003338:	4675      	mov	r5, lr
 800333a:	fbb3 f0f2 	udiv	r0, r3, r2
 800333e:	fb02 3310 	mls	r3, r2, r0, r3
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003348:	4603      	mov	r3, r0
 800334a:	2800      	cmp	r0, #0
 800334c:	d1f5      	bne.n	800333a <_printf_i+0x17e>
 800334e:	e7b7      	b.n	80032c0 <_printf_i+0x104>
 8003350:	6808      	ldr	r0, [r1, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003358:	6949      	ldr	r1, [r1, #20]
 800335a:	d004      	beq.n	8003366 <_printf_i+0x1aa>
 800335c:	1d10      	adds	r0, r2, #4
 800335e:	6018      	str	r0, [r3, #0]
 8003360:	6813      	ldr	r3, [r2, #0]
 8003362:	6019      	str	r1, [r3, #0]
 8003364:	e007      	b.n	8003376 <_printf_i+0x1ba>
 8003366:	f010 0f40 	tst.w	r0, #64	; 0x40
 800336a:	f102 0004 	add.w	r0, r2, #4
 800336e:	6018      	str	r0, [r3, #0]
 8003370:	6813      	ldr	r3, [r2, #0]
 8003372:	d0f6      	beq.n	8003362 <_printf_i+0x1a6>
 8003374:	8019      	strh	r1, [r3, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	4675      	mov	r5, lr
 800337a:	6123      	str	r3, [r4, #16]
 800337c:	e7b1      	b.n	80032e2 <_printf_i+0x126>
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	1d11      	adds	r1, r2, #4
 8003382:	6019      	str	r1, [r3, #0]
 8003384:	6815      	ldr	r5, [r2, #0]
 8003386:	2100      	movs	r1, #0
 8003388:	6862      	ldr	r2, [r4, #4]
 800338a:	4628      	mov	r0, r5
 800338c:	f000 f836 	bl	80033fc <memchr>
 8003390:	b108      	cbz	r0, 8003396 <_printf_i+0x1da>
 8003392:	1b40      	subs	r0, r0, r5
 8003394:	6060      	str	r0, [r4, #4]
 8003396:	6863      	ldr	r3, [r4, #4]
 8003398:	6123      	str	r3, [r4, #16]
 800339a:	2300      	movs	r3, #0
 800339c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033a0:	e79f      	b.n	80032e2 <_printf_i+0x126>
 80033a2:	6923      	ldr	r3, [r4, #16]
 80033a4:	462a      	mov	r2, r5
 80033a6:	4639      	mov	r1, r7
 80033a8:	4630      	mov	r0, r6
 80033aa:	47c0      	blx	r8
 80033ac:	3001      	adds	r0, #1
 80033ae:	d0a2      	beq.n	80032f6 <_printf_i+0x13a>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	079b      	lsls	r3, r3, #30
 80033b4:	d507      	bpl.n	80033c6 <_printf_i+0x20a>
 80033b6:	2500      	movs	r5, #0
 80033b8:	f104 0919 	add.w	r9, r4, #25
 80033bc:	68e3      	ldr	r3, [r4, #12]
 80033be:	9a03      	ldr	r2, [sp, #12]
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	429d      	cmp	r5, r3
 80033c4:	db05      	blt.n	80033d2 <_printf_i+0x216>
 80033c6:	68e0      	ldr	r0, [r4, #12]
 80033c8:	9b03      	ldr	r3, [sp, #12]
 80033ca:	4298      	cmp	r0, r3
 80033cc:	bfb8      	it	lt
 80033ce:	4618      	movlt	r0, r3
 80033d0:	e793      	b.n	80032fa <_printf_i+0x13e>
 80033d2:	2301      	movs	r3, #1
 80033d4:	464a      	mov	r2, r9
 80033d6:	4639      	mov	r1, r7
 80033d8:	4630      	mov	r0, r6
 80033da:	47c0      	blx	r8
 80033dc:	3001      	adds	r0, #1
 80033de:	d08a      	beq.n	80032f6 <_printf_i+0x13a>
 80033e0:	3501      	adds	r5, #1
 80033e2:	e7eb      	b.n	80033bc <_printf_i+0x200>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1a7      	bne.n	8003338 <_printf_i+0x17c>
 80033e8:	780b      	ldrb	r3, [r1, #0]
 80033ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033f2:	e765      	b.n	80032c0 <_printf_i+0x104>
 80033f4:	08005f53 	.word	0x08005f53
 80033f8:	08005f42 	.word	0x08005f42

080033fc <memchr>:
 80033fc:	b510      	push	{r4, lr}
 80033fe:	b2c9      	uxtb	r1, r1
 8003400:	4402      	add	r2, r0
 8003402:	4290      	cmp	r0, r2
 8003404:	4603      	mov	r3, r0
 8003406:	d101      	bne.n	800340c <memchr+0x10>
 8003408:	2000      	movs	r0, #0
 800340a:	bd10      	pop	{r4, pc}
 800340c:	781c      	ldrb	r4, [r3, #0]
 800340e:	3001      	adds	r0, #1
 8003410:	428c      	cmp	r4, r1
 8003412:	d1f6      	bne.n	8003402 <memchr+0x6>
 8003414:	4618      	mov	r0, r3
 8003416:	bd10      	pop	{r4, pc}

08003418 <memcpy>:
 8003418:	b510      	push	{r4, lr}
 800341a:	1e43      	subs	r3, r0, #1
 800341c:	440a      	add	r2, r1
 800341e:	4291      	cmp	r1, r2
 8003420:	d100      	bne.n	8003424 <memcpy+0xc>
 8003422:	bd10      	pop	{r4, pc}
 8003424:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800342c:	e7f7      	b.n	800341e <memcpy+0x6>

0800342e <memmove>:
 800342e:	4288      	cmp	r0, r1
 8003430:	b510      	push	{r4, lr}
 8003432:	eb01 0302 	add.w	r3, r1, r2
 8003436:	d803      	bhi.n	8003440 <memmove+0x12>
 8003438:	1e42      	subs	r2, r0, #1
 800343a:	4299      	cmp	r1, r3
 800343c:	d10c      	bne.n	8003458 <memmove+0x2a>
 800343e:	bd10      	pop	{r4, pc}
 8003440:	4298      	cmp	r0, r3
 8003442:	d2f9      	bcs.n	8003438 <memmove+0xa>
 8003444:	1881      	adds	r1, r0, r2
 8003446:	1ad2      	subs	r2, r2, r3
 8003448:	42d3      	cmn	r3, r2
 800344a:	d100      	bne.n	800344e <memmove+0x20>
 800344c:	bd10      	pop	{r4, pc}
 800344e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003452:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003456:	e7f7      	b.n	8003448 <memmove+0x1a>
 8003458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800345c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003460:	e7eb      	b.n	800343a <memmove+0xc>
	...

08003464 <_free_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	4605      	mov	r5, r0
 8003468:	2900      	cmp	r1, #0
 800346a:	d043      	beq.n	80034f4 <_free_r+0x90>
 800346c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003470:	1f0c      	subs	r4, r1, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	bfb8      	it	lt
 8003476:	18e4      	addlt	r4, r4, r3
 8003478:	f000 f8d4 	bl	8003624 <__malloc_lock>
 800347c:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <_free_r+0x94>)
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	4610      	mov	r0, r2
 8003482:	b933      	cbnz	r3, 8003492 <_free_r+0x2e>
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	6014      	str	r4, [r2, #0]
 8003488:	4628      	mov	r0, r5
 800348a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800348e:	f000 b8ca 	b.w	8003626 <__malloc_unlock>
 8003492:	42a3      	cmp	r3, r4
 8003494:	d90b      	bls.n	80034ae <_free_r+0x4a>
 8003496:	6821      	ldr	r1, [r4, #0]
 8003498:	1862      	adds	r2, r4, r1
 800349a:	4293      	cmp	r3, r2
 800349c:	bf01      	itttt	eq
 800349e:	681a      	ldreq	r2, [r3, #0]
 80034a0:	685b      	ldreq	r3, [r3, #4]
 80034a2:	1852      	addeq	r2, r2, r1
 80034a4:	6022      	streq	r2, [r4, #0]
 80034a6:	6063      	str	r3, [r4, #4]
 80034a8:	6004      	str	r4, [r0, #0]
 80034aa:	e7ed      	b.n	8003488 <_free_r+0x24>
 80034ac:	4613      	mov	r3, r2
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	b10a      	cbz	r2, 80034b6 <_free_r+0x52>
 80034b2:	42a2      	cmp	r2, r4
 80034b4:	d9fa      	bls.n	80034ac <_free_r+0x48>
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	1858      	adds	r0, r3, r1
 80034ba:	42a0      	cmp	r0, r4
 80034bc:	d10b      	bne.n	80034d6 <_free_r+0x72>
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	4401      	add	r1, r0
 80034c2:	1858      	adds	r0, r3, r1
 80034c4:	4282      	cmp	r2, r0
 80034c6:	6019      	str	r1, [r3, #0]
 80034c8:	d1de      	bne.n	8003488 <_free_r+0x24>
 80034ca:	6810      	ldr	r0, [r2, #0]
 80034cc:	6852      	ldr	r2, [r2, #4]
 80034ce:	4401      	add	r1, r0
 80034d0:	6019      	str	r1, [r3, #0]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	e7d8      	b.n	8003488 <_free_r+0x24>
 80034d6:	d902      	bls.n	80034de <_free_r+0x7a>
 80034d8:	230c      	movs	r3, #12
 80034da:	602b      	str	r3, [r5, #0]
 80034dc:	e7d4      	b.n	8003488 <_free_r+0x24>
 80034de:	6820      	ldr	r0, [r4, #0]
 80034e0:	1821      	adds	r1, r4, r0
 80034e2:	428a      	cmp	r2, r1
 80034e4:	bf01      	itttt	eq
 80034e6:	6811      	ldreq	r1, [r2, #0]
 80034e8:	6852      	ldreq	r2, [r2, #4]
 80034ea:	1809      	addeq	r1, r1, r0
 80034ec:	6021      	streq	r1, [r4, #0]
 80034ee:	6062      	str	r2, [r4, #4]
 80034f0:	605c      	str	r4, [r3, #4]
 80034f2:	e7c9      	b.n	8003488 <_free_r+0x24>
 80034f4:	bd38      	pop	{r3, r4, r5, pc}
 80034f6:	bf00      	nop
 80034f8:	200004ac 	.word	0x200004ac

080034fc <_malloc_r>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	1ccd      	adds	r5, r1, #3
 8003500:	f025 0503 	bic.w	r5, r5, #3
 8003504:	3508      	adds	r5, #8
 8003506:	2d0c      	cmp	r5, #12
 8003508:	bf38      	it	cc
 800350a:	250c      	movcc	r5, #12
 800350c:	2d00      	cmp	r5, #0
 800350e:	4606      	mov	r6, r0
 8003510:	db01      	blt.n	8003516 <_malloc_r+0x1a>
 8003512:	42a9      	cmp	r1, r5
 8003514:	d903      	bls.n	800351e <_malloc_r+0x22>
 8003516:	230c      	movs	r3, #12
 8003518:	6033      	str	r3, [r6, #0]
 800351a:	2000      	movs	r0, #0
 800351c:	bd70      	pop	{r4, r5, r6, pc}
 800351e:	f000 f881 	bl	8003624 <__malloc_lock>
 8003522:	4a23      	ldr	r2, [pc, #140]	; (80035b0 <_malloc_r+0xb4>)
 8003524:	6814      	ldr	r4, [r2, #0]
 8003526:	4621      	mov	r1, r4
 8003528:	b991      	cbnz	r1, 8003550 <_malloc_r+0x54>
 800352a:	4c22      	ldr	r4, [pc, #136]	; (80035b4 <_malloc_r+0xb8>)
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	b91b      	cbnz	r3, 8003538 <_malloc_r+0x3c>
 8003530:	4630      	mov	r0, r6
 8003532:	f000 f867 	bl	8003604 <_sbrk_r>
 8003536:	6020      	str	r0, [r4, #0]
 8003538:	4629      	mov	r1, r5
 800353a:	4630      	mov	r0, r6
 800353c:	f000 f862 	bl	8003604 <_sbrk_r>
 8003540:	1c43      	adds	r3, r0, #1
 8003542:	d126      	bne.n	8003592 <_malloc_r+0x96>
 8003544:	230c      	movs	r3, #12
 8003546:	4630      	mov	r0, r6
 8003548:	6033      	str	r3, [r6, #0]
 800354a:	f000 f86c 	bl	8003626 <__malloc_unlock>
 800354e:	e7e4      	b.n	800351a <_malloc_r+0x1e>
 8003550:	680b      	ldr	r3, [r1, #0]
 8003552:	1b5b      	subs	r3, r3, r5
 8003554:	d41a      	bmi.n	800358c <_malloc_r+0x90>
 8003556:	2b0b      	cmp	r3, #11
 8003558:	d90f      	bls.n	800357a <_malloc_r+0x7e>
 800355a:	600b      	str	r3, [r1, #0]
 800355c:	18cc      	adds	r4, r1, r3
 800355e:	50cd      	str	r5, [r1, r3]
 8003560:	4630      	mov	r0, r6
 8003562:	f000 f860 	bl	8003626 <__malloc_unlock>
 8003566:	f104 000b 	add.w	r0, r4, #11
 800356a:	1d23      	adds	r3, r4, #4
 800356c:	f020 0007 	bic.w	r0, r0, #7
 8003570:	1ac3      	subs	r3, r0, r3
 8003572:	d01b      	beq.n	80035ac <_malloc_r+0xb0>
 8003574:	425a      	negs	r2, r3
 8003576:	50e2      	str	r2, [r4, r3]
 8003578:	bd70      	pop	{r4, r5, r6, pc}
 800357a:	428c      	cmp	r4, r1
 800357c:	bf0b      	itete	eq
 800357e:	6863      	ldreq	r3, [r4, #4]
 8003580:	684b      	ldrne	r3, [r1, #4]
 8003582:	6013      	streq	r3, [r2, #0]
 8003584:	6063      	strne	r3, [r4, #4]
 8003586:	bf18      	it	ne
 8003588:	460c      	movne	r4, r1
 800358a:	e7e9      	b.n	8003560 <_malloc_r+0x64>
 800358c:	460c      	mov	r4, r1
 800358e:	6849      	ldr	r1, [r1, #4]
 8003590:	e7ca      	b.n	8003528 <_malloc_r+0x2c>
 8003592:	1cc4      	adds	r4, r0, #3
 8003594:	f024 0403 	bic.w	r4, r4, #3
 8003598:	42a0      	cmp	r0, r4
 800359a:	d005      	beq.n	80035a8 <_malloc_r+0xac>
 800359c:	1a21      	subs	r1, r4, r0
 800359e:	4630      	mov	r0, r6
 80035a0:	f000 f830 	bl	8003604 <_sbrk_r>
 80035a4:	3001      	adds	r0, #1
 80035a6:	d0cd      	beq.n	8003544 <_malloc_r+0x48>
 80035a8:	6025      	str	r5, [r4, #0]
 80035aa:	e7d9      	b.n	8003560 <_malloc_r+0x64>
 80035ac:	bd70      	pop	{r4, r5, r6, pc}
 80035ae:	bf00      	nop
 80035b0:	200004ac 	.word	0x200004ac
 80035b4:	200004b0 	.word	0x200004b0

080035b8 <_realloc_r>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	4607      	mov	r7, r0
 80035bc:	4614      	mov	r4, r2
 80035be:	460e      	mov	r6, r1
 80035c0:	b921      	cbnz	r1, 80035cc <_realloc_r+0x14>
 80035c2:	4611      	mov	r1, r2
 80035c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035c8:	f7ff bf98 	b.w	80034fc <_malloc_r>
 80035cc:	b922      	cbnz	r2, 80035d8 <_realloc_r+0x20>
 80035ce:	f7ff ff49 	bl	8003464 <_free_r>
 80035d2:	4625      	mov	r5, r4
 80035d4:	4628      	mov	r0, r5
 80035d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d8:	f000 f826 	bl	8003628 <_malloc_usable_size_r>
 80035dc:	4284      	cmp	r4, r0
 80035de:	d90f      	bls.n	8003600 <_realloc_r+0x48>
 80035e0:	4621      	mov	r1, r4
 80035e2:	4638      	mov	r0, r7
 80035e4:	f7ff ff8a 	bl	80034fc <_malloc_r>
 80035e8:	4605      	mov	r5, r0
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d0f2      	beq.n	80035d4 <_realloc_r+0x1c>
 80035ee:	4631      	mov	r1, r6
 80035f0:	4622      	mov	r2, r4
 80035f2:	f7ff ff11 	bl	8003418 <memcpy>
 80035f6:	4631      	mov	r1, r6
 80035f8:	4638      	mov	r0, r7
 80035fa:	f7ff ff33 	bl	8003464 <_free_r>
 80035fe:	e7e9      	b.n	80035d4 <_realloc_r+0x1c>
 8003600:	4635      	mov	r5, r6
 8003602:	e7e7      	b.n	80035d4 <_realloc_r+0x1c>

08003604 <_sbrk_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	2300      	movs	r3, #0
 8003608:	4c05      	ldr	r4, [pc, #20]	; (8003620 <_sbrk_r+0x1c>)
 800360a:	4605      	mov	r5, r0
 800360c:	4608      	mov	r0, r1
 800360e:	6023      	str	r3, [r4, #0]
 8003610:	f000 f814 	bl	800363c <_sbrk>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_sbrk_r+0x1a>
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	b103      	cbz	r3, 800361e <_sbrk_r+0x1a>
 800361c:	602b      	str	r3, [r5, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	20000a50 	.word	0x20000a50

08003624 <__malloc_lock>:
 8003624:	4770      	bx	lr

08003626 <__malloc_unlock>:
 8003626:	4770      	bx	lr

08003628 <_malloc_usable_size_r>:
 8003628:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800362c:	2800      	cmp	r0, #0
 800362e:	f1a0 0004 	sub.w	r0, r0, #4
 8003632:	bfbc      	itt	lt
 8003634:	580b      	ldrlt	r3, [r1, r0]
 8003636:	18c0      	addlt	r0, r0, r3
 8003638:	4770      	bx	lr
	...

0800363c <_sbrk>:
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <_sbrk+0x14>)
 800363e:	4602      	mov	r2, r0
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	b909      	cbnz	r1, 8003648 <_sbrk+0xc>
 8003644:	4903      	ldr	r1, [pc, #12]	; (8003654 <_sbrk+0x18>)
 8003646:	6019      	str	r1, [r3, #0]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	4402      	add	r2, r0
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	4770      	bx	lr
 8003650:	200004b4 	.word	0x200004b4
 8003654:	20000a54 	.word	0x20000a54

08003658 <_init>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr

08003664 <_fini>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr
